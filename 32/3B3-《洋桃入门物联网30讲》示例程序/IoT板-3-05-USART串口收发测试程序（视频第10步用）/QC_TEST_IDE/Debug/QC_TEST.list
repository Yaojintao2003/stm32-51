
QC_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000485c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a14  08004a14  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004a14  08004a14  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a14  08004a14  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a14  08004a14  00014a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  20000070  08004a8c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c0  08004a8c  000207c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001405e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003271  00000000  00000000  000340f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00037368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  000383b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4b0  00000000  00000000  00039290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143d4  00000000  00000000  00054740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092bbf  00000000  00000000  00068b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb6d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a8  00000000  00000000  000fb728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004950 	.word	0x08004950

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004950 	.word	0x08004950

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fec8 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f878 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fa7a 	bl	8000650 <MX_GPIO_Init>
  MX_RTC_Init();
 800015c:	f000 f986 	bl	800046c <MX_RTC_Init>
  MX_ADC1_Init();
 8000160:	f000 f8d4 	bl	800030c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000164:	f000 f910 	bl	8000388 <MX_ADC2_Init>
  MX_CAN_Init();
 8000168:	f000 f94c 	bl	8000404 <MX_CAN_Init>
  MX_SPI2_Init();
 800016c:	f000 f99a 	bl	80004a4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f9ce 	bl	8000510 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000174:	f000 f9f6 	bl	8000564 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000178:	f000 fa1e 	bl	80005b8 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 800017c:	f000 fa46 	bl	800060c <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);//将printf()函数映射到UART1串口上
 8000180:	482b      	ldr	r0, [pc, #172]	; (8000230 <main+0xe4>)
 8000182:	f000 fb0b 	bl	800079c <RetargetInit>
  HAL_UART_Receive_IT(&huart1,(uint8_t *)&USART1_NewData,1);//开启串口1接收中断
 8000186:	2201      	movs	r2, #1
 8000188:	492a      	ldr	r1, [pc, #168]	; (8000234 <main+0xe8>)
 800018a:	4829      	ldr	r0, [pc, #164]	; (8000230 <main+0xe4>)
 800018c:	f002 ff70 	bl	8003070 <HAL_UART_Receive_IT>
//	  HAL_Delay(100);//在主循环里写入HAL库的毫秒级延时函数
//	  LED_1(0);//LED1灯控制（1点亮，0熄灭）
//	  LED_2(1);//LED2灯控制（1点亮，0熄灭）
//	  HAL_Delay(100);//在主循环里写入HAL库的毫秒级延时函数

	  if(KEY_1()) //按键KEY1判断为1时按键按下
 8000190:	f003 fc8c 	bl	8003aac <KEY_1>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d011      	beq.n	80001be <main+0x72>
	  {
		  LED_1(1);//LED1灯控制（1点亮，0熄灭）
 800019a:	2001      	movs	r0, #1
 800019c:	f003 fcd6 	bl	8003b4c <LED_1>
		  LED_2(1);//LED2灯控制（1点亮，0熄灭）
 80001a0:	2001      	movs	r0, #1
 80001a2:	f003 fced 	bl	8003b80 <LED_2>
		  BUZZER_SOLO1();//蜂鸣器输出单音的报警音（样式1：HAL库的精准延时函数）
 80001a6:	f003 fc1b 	bl	80039e0 <BUZZER_SOLO1>
		  RELAY_1(1);//继电器的控制程序（c=0继电器放开，c=1继电器吸合）
 80001aa:	2001      	movs	r0, #1
 80001ac:	f003 fd02 	bl	8003bb4 <RELAY_1>
	      HAL_UART_Transmit(&huart1,(uint8_t*)&"KEY1\r\n",6,0xffff);//串口发送：串口号1，内容"ABC"，数量3，溢出时间0xffff
 80001b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001b4:	2206      	movs	r2, #6
 80001b6:	4920      	ldr	r1, [pc, #128]	; (8000238 <main+0xec>)
 80001b8:	481d      	ldr	r0, [pc, #116]	; (8000230 <main+0xe4>)
 80001ba:	f002 fe25 	bl	8002e08 <HAL_UART_Transmit>
	  }
	  if(KEY_2()) //按键KEY2判断为1时按键按下
 80001be:	f003 fc9d 	bl	8003afc <KEY_2>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d00d      	beq.n	80001e4 <main+0x98>
	  {
		  LED_1(0);//LED1灯控制（1点亮，0熄灭）
 80001c8:	2000      	movs	r0, #0
 80001ca:	f003 fcbf 	bl	8003b4c <LED_1>
		  LED_2(0);//LED2灯控制（1点亮，0熄灭）
 80001ce:	2000      	movs	r0, #0
 80001d0:	f003 fcd6 	bl	8003b80 <LED_2>
		  BUZZER_SOLO2();//蜂鸣器输出单音的报警音（样式2：CPU微秒级延时）
 80001d4:	f003 fc28 	bl	8003a28 <BUZZER_SOLO2>
		  RELAY_1(0);//继电器的控制程序（c=0继电器放开，c=1继电器吸合）
 80001d8:	2000      	movs	r0, #0
 80001da:	f003 fceb 	bl	8003bb4 <RELAY_1>
		  printf("KEY2\r\n");//向USART1串口发送字符串
 80001de:	4817      	ldr	r0, [pc, #92]	; (800023c <main+0xf0>)
 80001e0:	f003 fe4c 	bl	8003e7c <puts>
	  }
	  if(USART1_RX_STA==0x0001){//串口1判断中断接收标志位
 80001e4:	4b16      	ldr	r3, [pc, #88]	; (8000240 <main+0xf4>)
 80001e6:	881b      	ldrh	r3, [r3, #0]
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d1d1      	bne.n	8000190 <main+0x44>
		  if(USART1_RX_BUF[0]=='1'){
 80001ec:	4b15      	ldr	r3, [pc, #84]	; (8000244 <main+0xf8>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	2b31      	cmp	r3, #49	; 0x31
 80001f2:	d10a      	bne.n	800020a <main+0xbe>
			  LED_1(1);//LED1灯控制（1点亮，0熄灭）
 80001f4:	2001      	movs	r0, #1
 80001f6:	f003 fca9 	bl	8003b4c <LED_1>
			  LED_2(1);//LED2灯控制（1点亮，0熄灭）
 80001fa:	2001      	movs	r0, #1
 80001fc:	f003 fcc0 	bl	8003b80 <LED_2>
			  BUZZER_SOLO1();//蜂鸣器输出单音的报警音（样式1：HAL库的精准延时函数）
 8000200:	f003 fbee 	bl	80039e0 <BUZZER_SOLO1>
			  RELAY_1(1);//继电器的控制程序（c=0继电器放开，c=1继电器吸合）
 8000204:	2001      	movs	r0, #1
 8000206:	f003 fcd5 	bl	8003bb4 <RELAY_1>
		  }
		  if(USART1_RX_BUF[0]=='0'){
 800020a:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <main+0xf8>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	2b30      	cmp	r3, #48	; 0x30
 8000210:	d10a      	bne.n	8000228 <main+0xdc>
			  LED_1(0);//LED1灯控制（1点亮，0熄灭）
 8000212:	2000      	movs	r0, #0
 8000214:	f003 fc9a 	bl	8003b4c <LED_1>
			  LED_2(0);//LED2灯控制（1点亮，0熄灭）
 8000218:	2000      	movs	r0, #0
 800021a:	f003 fcb1 	bl	8003b80 <LED_2>
			  BUZZER_SOLO2();//蜂鸣器输出单音的报警音（样式2：CPU微秒级延时）
 800021e:	f003 fc03 	bl	8003a28 <BUZZER_SOLO2>
			  RELAY_1(0);//继电器的控制程序（c=0继电器放开，c=1继电器吸合）
 8000222:	2000      	movs	r0, #0
 8000224:	f003 fcc6 	bl	8003bb4 <RELAY_1>
		  }
		  USART1_RX_STA=0;//串口接收标志清0，即开启下一轮接收
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <main+0xf4>)
 800022a:	2200      	movs	r2, #0
 800022c:	801a      	strh	r2, [r3, #0]
	  if(KEY_1()) //按键KEY1判断为1时按键按下
 800022e:	e7af      	b.n	8000190 <main+0x44>
 8000230:	200001c0 	.word	0x200001c0
 8000234:	200006e4 	.word	0x200006e4
 8000238:	08004968 	.word	0x08004968
 800023c:	08004970 	.word	0x08004970
 8000240:	20000090 	.word	0x20000090
 8000244:	200006e8 	.word	0x200006e8

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b094      	sub	sp, #80	; 0x50
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000252:	2228      	movs	r2, #40	; 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f003 fd86 	bl	8003d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	f107 0314 	add.w	r3, r7, #20
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]
 8000268:	60da      	str	r2, [r3, #12]
 800026a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000278:	2305      	movs	r3, #5
 800027a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000280:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000286:	2301      	movs	r3, #1
 8000288:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	2301      	movs	r3, #1
 800028c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000296:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000298:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 fe38 	bl	8001f18 <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002ae:	f000 fa6f 	bl	8000790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	2302      	movs	r3, #2
 80002b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	2102      	movs	r1, #2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 f8a2 	bl	8002418 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002da:	f000 fa59 	bl	8000790 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 80002de:	2313      	movs	r3, #19
 80002e0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80002e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80002e8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80002ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002ee:	2300      	movs	r3, #0
 80002f0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4618      	mov	r0, r3
 80002f6:	f002 fa29 	bl	800274c <HAL_RCCEx_PeriphCLKConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000300:	f000 fa46 	bl	8000790 <Error_Handler>
  }
}
 8000304:	bf00      	nop
 8000306:	3750      	adds	r7, #80	; 0x50
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800031c:	4b18      	ldr	r3, [pc, #96]	; (8000380 <MX_ADC1_Init+0x74>)
 800031e:	4a19      	ldr	r2, [pc, #100]	; (8000384 <MX_ADC1_Init+0x78>)
 8000320:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000322:	4b17      	ldr	r3, [pc, #92]	; (8000380 <MX_ADC1_Init+0x74>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000328:	4b15      	ldr	r3, [pc, #84]	; (8000380 <MX_ADC1_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800032e:	4b14      	ldr	r3, [pc, #80]	; (8000380 <MX_ADC1_Init+0x74>)
 8000330:	2200      	movs	r2, #0
 8000332:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000334:	4b12      	ldr	r3, [pc, #72]	; (8000380 <MX_ADC1_Init+0x74>)
 8000336:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800033a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800033c:	4b10      	ldr	r3, [pc, #64]	; (8000380 <MX_ADC1_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000342:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <MX_ADC1_Init+0x74>)
 8000344:	2201      	movs	r2, #1
 8000346:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000348:	480d      	ldr	r0, [pc, #52]	; (8000380 <MX_ADC1_Init+0x74>)
 800034a:	f000 fe51 	bl	8000ff0 <HAL_ADC_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000354:	f000 fa1c 	bl	8000790 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000358:	2304      	movs	r3, #4
 800035a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800035c:	2301      	movs	r3, #1
 800035e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4619      	mov	r1, r3
 8000368:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_ADC1_Init+0x74>)
 800036a:	f000 ff19 	bl	80011a0 <HAL_ADC_ConfigChannel>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000374:	f000 fa0c 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000378:	bf00      	nop
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20000190 	.word	0x20000190
 8000384:	40012400 	.word	0x40012400

08000388 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000398:	4b18      	ldr	r3, [pc, #96]	; (80003fc <MX_ADC2_Init+0x74>)
 800039a:	4a19      	ldr	r2, [pc, #100]	; (8000400 <MX_ADC2_Init+0x78>)
 800039c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800039e:	4b17      	ldr	r3, [pc, #92]	; (80003fc <MX_ADC2_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003a4:	4b15      	ldr	r3, [pc, #84]	; (80003fc <MX_ADC2_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003aa:	4b14      	ldr	r3, [pc, #80]	; (80003fc <MX_ADC2_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <MX_ADC2_Init+0x74>)
 80003b2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003b6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <MX_ADC2_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_ADC2_Init+0x74>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003c4:	480d      	ldr	r0, [pc, #52]	; (80003fc <MX_ADC2_Init+0x74>)
 80003c6:	f000 fe13 	bl	8000ff0 <HAL_ADC_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80003d0:	f000 f9de 	bl	8000790 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003d4:	2305      	movs	r3, #5
 80003d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d8:	2301      	movs	r3, #1
 80003da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	4619      	mov	r1, r3
 80003e4:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_ADC2_Init+0x74>)
 80003e6:	f000 fedb 	bl	80011a0 <HAL_ADC_ConfigChannel>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80003f0:	f000 f9ce 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000138 	.word	0x20000138
 8000400:	40012800 	.word	0x40012800

08000404 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000408:	4b16      	ldr	r3, [pc, #88]	; (8000464 <MX_CAN_Init+0x60>)
 800040a:	4a17      	ldr	r2, [pc, #92]	; (8000468 <MX_CAN_Init+0x64>)
 800040c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <MX_CAN_Init+0x60>)
 8000410:	2210      	movs	r2, #16
 8000412:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000414:	4b13      	ldr	r3, [pc, #76]	; (8000464 <MX_CAN_Init+0x60>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800041a:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_CAN_Init+0x60>)
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000420:	4b10      	ldr	r3, [pc, #64]	; (8000464 <MX_CAN_Init+0x60>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_CAN_Init+0x60>)
 8000428:	2200      	movs	r2, #0
 800042a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800042c:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <MX_CAN_Init+0x60>)
 800042e:	2200      	movs	r2, #0
 8000430:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <MX_CAN_Init+0x60>)
 8000434:	2200      	movs	r2, #0
 8000436:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000438:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <MX_CAN_Init+0x60>)
 800043a:	2200      	movs	r2, #0
 800043c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <MX_CAN_Init+0x60>)
 8000440:	2200      	movs	r2, #0
 8000442:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000444:	4b07      	ldr	r3, [pc, #28]	; (8000464 <MX_CAN_Init+0x60>)
 8000446:	2200      	movs	r2, #0
 8000448:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <MX_CAN_Init+0x60>)
 800044c:	2200      	movs	r2, #0
 800044e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000450:	4804      	ldr	r0, [pc, #16]	; (8000464 <MX_CAN_Init+0x60>)
 8000452:	f000 ffde 	bl	8001412 <HAL_CAN_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800045c:	f000 f998 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000168 	.word	0x20000168
 8000468:	40006400 	.word	0x40006400

0800046c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000470:	4b0a      	ldr	r3, [pc, #40]	; (800049c <MX_RTC_Init+0x30>)
 8000472:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <MX_RTC_Init+0x34>)
 8000474:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_RTC_Init+0x30>)
 8000478:	f04f 32ff 	mov.w	r2, #4294967295
 800047c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <MX_RTC_Init+0x30>)
 8000480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000484:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000486:	4805      	ldr	r0, [pc, #20]	; (800049c <MX_RTC_Init+0x30>)
 8000488:	f002 fada 	bl	8002a40 <HAL_RTC_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000492:	f000 f97d 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000204 	.word	0x20000204
 80004a0:	40002800 	.word	0x40002800

080004a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80004a8:	4b17      	ldr	r3, [pc, #92]	; (8000508 <MX_SPI2_Init+0x64>)
 80004aa:	4a18      	ldr	r2, [pc, #96]	; (800050c <MX_SPI2_Init+0x68>)
 80004ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80004ae:	4b16      	ldr	r3, [pc, #88]	; (8000508 <MX_SPI2_Init+0x64>)
 80004b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80004b6:	4b14      	ldr	r3, [pc, #80]	; (8000508 <MX_SPI2_Init+0x64>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <MX_SPI2_Init+0x64>)
 80004be:	2200      	movs	r2, #0
 80004c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004c2:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_SPI2_Init+0x64>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <MX_SPI2_Init+0x64>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_SPI2_Init+0x64>)
 80004d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_SPI2_Init+0x64>)
 80004d8:	2200      	movs	r2, #0
 80004da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <MX_SPI2_Init+0x64>)
 80004de:	2200      	movs	r2, #0
 80004e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_SPI2_Init+0x64>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <MX_SPI2_Init+0x64>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_SPI2_Init+0x64>)
 80004f0:	220a      	movs	r2, #10
 80004f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004f4:	4804      	ldr	r0, [pc, #16]	; (8000508 <MX_SPI2_Init+0x64>)
 80004f6:	f002 fbb6 	bl	8002c66 <HAL_SPI_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000500:	f000 f946 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	2000009c 	.word	0x2000009c
 800050c:	40003800 	.word	0x40003800

08000510 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_USART1_UART_Init+0x4c>)
 8000516:	4a12      	ldr	r2, [pc, #72]	; (8000560 <MX_USART1_UART_Init+0x50>)
 8000518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <MX_USART1_UART_Init+0x4c>)
 800051c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <MX_USART1_UART_Init+0x4c>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <MX_USART1_UART_Init+0x4c>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <MX_USART1_UART_Init+0x4c>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <MX_USART1_UART_Init+0x4c>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <MX_USART1_UART_Init+0x4c>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <MX_USART1_UART_Init+0x4c>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <MX_USART1_UART_Init+0x4c>)
 8000548:	f002 fc11 	bl	8002d6e <HAL_UART_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000552:	f000 f91d 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200001c0 	.word	0x200001c0
 8000560:	40013800 	.word	0x40013800

08000564 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_USART2_UART_Init+0x4c>)
 800056a:	4a12      	ldr	r2, [pc, #72]	; (80005b4 <MX_USART2_UART_Init+0x50>)
 800056c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <MX_USART2_UART_Init+0x4c>)
 8000570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000574:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_USART2_UART_Init+0x4c>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <MX_USART2_UART_Init+0x4c>)
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <MX_USART2_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <MX_USART2_UART_Init+0x4c>)
 800058a:	220c      	movs	r2, #12
 800058c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <MX_USART2_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MX_USART2_UART_Init+0x4c>)
 8000596:	2200      	movs	r2, #0
 8000598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_USART2_UART_Init+0x4c>)
 800059c:	f002 fbe7 	bl	8002d6e <HAL_UART_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005a6:	f000 f8f3 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000218 	.word	0x20000218
 80005b4:	40004400 	.word	0x40004400

080005b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_USART3_UART_Init+0x4c>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <MX_USART3_UART_Init+0x50>)
 80005c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <MX_USART3_UART_Init+0x4c>)
 80005c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_USART3_UART_Init+0x4c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_USART3_UART_Init+0x4c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <MX_USART3_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_USART3_UART_Init+0x4c>)
 80005de:	220c      	movs	r2, #12
 80005e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <MX_USART3_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_USART3_UART_Init+0x4c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <MX_USART3_UART_Init+0x4c>)
 80005f0:	f002 fbbd 	bl	8002d6e <HAL_UART_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80005fa:	f000 f8c9 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000f4 	.word	0x200000f4
 8000608:	40004800 	.word	0x40004800

0800060c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <MX_USB_PCD_Init+0x3c>)
 8000612:	4a0e      	ldr	r2, [pc, #56]	; (800064c <MX_USB_PCD_Init+0x40>)
 8000614:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USB_PCD_Init+0x3c>)
 8000618:	2208      	movs	r2, #8
 800061a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_USB_PCD_Init+0x3c>)
 800061e:	2202      	movs	r2, #2
 8000620:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USB_PCD_Init+0x3c>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_USB_PCD_Init+0x3c>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USB_PCD_Init+0x3c>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_USB_PCD_Init+0x3c>)
 8000636:	f001 fb58 	bl	8001cea <HAL_PCD_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000640:	f000 f8a6 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000025c 	.word	0x2000025c
 800064c:	40005c00 	.word	0x40005c00

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000664:	4b47      	ldr	r3, [pc, #284]	; (8000784 <MX_GPIO_Init+0x134>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a46      	ldr	r2, [pc, #280]	; (8000784 <MX_GPIO_Init+0x134>)
 800066a:	f043 0310 	orr.w	r3, r3, #16
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b44      	ldr	r3, [pc, #272]	; (8000784 <MX_GPIO_Init+0x134>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0310 	and.w	r3, r3, #16
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067c:	4b41      	ldr	r3, [pc, #260]	; (8000784 <MX_GPIO_Init+0x134>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a40      	ldr	r2, [pc, #256]	; (8000784 <MX_GPIO_Init+0x134>)
 8000682:	f043 0320 	orr.w	r3, r3, #32
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b3e      	ldr	r3, [pc, #248]	; (8000784 <MX_GPIO_Init+0x134>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0320 	and.w	r3, r3, #32
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <MX_GPIO_Init+0x134>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <MX_GPIO_Init+0x134>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b38      	ldr	r3, [pc, #224]	; (8000784 <MX_GPIO_Init+0x134>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ac:	4b35      	ldr	r3, [pc, #212]	; (8000784 <MX_GPIO_Init+0x134>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a34      	ldr	r2, [pc, #208]	; (8000784 <MX_GPIO_Init+0x134>)
 80006b2:	f043 0308 	orr.w	r3, r3, #8
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b32      	ldr	r3, [pc, #200]	; (8000784 <MX_GPIO_Init+0x134>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2140      	movs	r1, #64	; 0x40
 80006c8:	482f      	ldr	r0, [pc, #188]	; (8000788 <MX_GPIO_Init+0x138>)
 80006ca:	f001 faf6 	bl	8001cba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2101      	movs	r1, #1
 80006d2:	482e      	ldr	r0, [pc, #184]	; (800078c <MX_GPIO_Init+0x13c>)
 80006d4:	f001 faf1 	bl	8001cba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|DHT11_DA_Pin|W25Q128_CS_Pin|BEEP1_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f241 0126 	movw	r1, #4134	; 0x1026
 80006de:	482b      	ldr	r0, [pc, #172]	; (800078c <MX_GPIO_Init+0x13c>)
 80006e0:	f001 faeb 	bl	8001cba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_RE_GPIO_Port, RS485_RE_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ea:	4827      	ldr	r0, [pc, #156]	; (8000788 <MX_GPIO_Init+0x138>)
 80006ec:	f001 fae5 	bl	8001cba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY1_Pin KEY2_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin;
 80006f0:	2303      	movs	r3, #3
 80006f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	4619      	mov	r1, r3
 8000702:	4821      	ldr	r0, [pc, #132]	; (8000788 <MX_GPIO_Init+0x138>)
 8000704:	f001 f93e 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY1_Pin */
  GPIO_InitStruct.Pin = RELAY1_Pin;
 8000708:	2340      	movs	r3, #64	; 0x40
 800070a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800070c:	2311      	movs	r3, #17
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY1_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4619      	mov	r1, r3
 800071e:	481a      	ldr	r0, [pc, #104]	; (8000788 <MX_GPIO_Init+0x138>)
 8000720:	f001 f930 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin DHT11_DA_Pin BEEP1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|DHT11_DA_Pin|BEEP1_Pin;
 8000724:	2327      	movs	r3, #39	; 0x27
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4619      	mov	r1, r3
 800073a:	4814      	ldr	r0, [pc, #80]	; (800078c <MX_GPIO_Init+0x13c>)
 800073c:	f001 f922 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : W25Q128_CS_Pin */
  GPIO_InitStruct.Pin = W25Q128_CS_Pin;
 8000740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074a:	2301      	movs	r3, #1
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(W25Q128_CS_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	4619      	mov	r1, r3
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <MX_GPIO_Init+0x13c>)
 800075a:	f001 f913 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_RE_Pin */
  GPIO_InitStruct.Pin = RS485_RE_Pin;
 800075e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RS485_RE_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	4619      	mov	r1, r3
 8000776:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_GPIO_Init+0x138>)
 8000778:	f001 f904 	bl	8001984 <HAL_GPIO_Init>

}
 800077c:	bf00      	nop
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000
 8000788:	40010800 	.word	0x40010800
 800078c:	40010c00 	.word	0x40010c00

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart)  {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <RetargetInit+0x28>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6013      	str	r3, [r2, #0]
  /* Disable I/O buffering for STDOUT  stream, so that
   * chars are sent out as soon as they are  printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80007aa:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <RetargetInit+0x2c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	6898      	ldr	r0, [r3, #8]
 80007b0:	2300      	movs	r3, #0
 80007b2:	2202      	movs	r2, #2
 80007b4:	2100      	movs	r1, #0
 80007b6:	f003 fb69 	bl	8003e8c <setvbuf>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000548 	.word	0x20000548
 80007c8:	2000000c 	.word	0x2000000c

080007cc <_isatty>:
int _isatty(int fd) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <=  STDERR_FILENO)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	db04      	blt.n	80007e4 <_isatty+0x18>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b02      	cmp	r3, #2
 80007de:	dc01      	bgt.n	80007e4 <_isatty+0x18>
    return 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	e005      	b.n	80007f0 <_isatty+0x24>
  errno = EBADF;
 80007e4:	f003 fa96 	bl	8003d14 <__errno>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2209      	movs	r2, #9
 80007ec:	601a      	str	r2, [r3, #0]
  return 0;
 80007ee:	2300      	movs	r3, #0
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <_write>:
int _write(int fd, char* ptr, int len) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;
  if (fd == STDOUT_FILENO || fd ==  STDERR_FILENO) {
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d002      	beq.n	8000810 <_write+0x18>
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2b02      	cmp	r3, #2
 800080e:	d111      	bne.n	8000834 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart,  (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <_write+0x54>)
 8000812:	6818      	ldr	r0, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	b29a      	uxth	r2, r3
 8000818:	f04f 33ff 	mov.w	r3, #4294967295
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	f002 faf3 	bl	8002e08 <HAL_UART_Transmit>
 8000822:	4603      	mov	r3, r0
 8000824:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000826:	7dfb      	ldrb	r3, [r7, #23]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d101      	bne.n	8000830 <_write+0x38>
      return len;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	e008      	b.n	8000842 <_write+0x4a>
    else
      return EIO;
 8000830:	2305      	movs	r3, #5
 8000832:	e006      	b.n	8000842 <_write+0x4a>
  }
  errno = EBADF;
 8000834:	f003 fa6e 	bl	8003d14 <__errno>
 8000838:	4603      	mov	r3, r0
 800083a:	2209      	movs	r2, #9
 800083c:	601a      	str	r2, [r3, #0]
  return -1;
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000842:	4618      	mov	r0, r3
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000548 	.word	0x20000548

08000850 <_close>:
int _close(int fd) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <=  STDERR_FILENO)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	db04      	blt.n	8000868 <_close+0x18>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b02      	cmp	r3, #2
 8000862:	dc01      	bgt.n	8000868 <_close+0x18>
    return 0;
 8000864:	2300      	movs	r3, #0
 8000866:	e006      	b.n	8000876 <_close+0x26>
  errno = EBADF;
 8000868:	f003 fa54 	bl	8003d14 <__errno>
 800086c:	4603      	mov	r3, r0
 800086e:	2209      	movs	r2, #9
 8000870:	601a      	str	r2, [r3, #0]
  return -1;
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_lseek>:
int _lseek(int fd, int ptr, int dir) {
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;
  errno = EBADF;
 800088a:	f003 fa43 	bl	8003d14 <__errno>
 800088e:	4603      	mov	r3, r0
 8000890:	2209      	movs	r2, #9
 8000892:	601a      	str	r2, [r3, #0]
  return -1;
 8000894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <_read>:
int _read(int fd, char* ptr, int len) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;
  if (fd == STDIN_FILENO) {
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d110      	bne.n	80008d4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart,  (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <_read+0x4c>)
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	2201      	movs	r2, #1
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	f002 fb35 	bl	8002f2c <HAL_UART_Receive>
 80008c2:	4603      	mov	r3, r0
 80008c4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008c6:	7dfb      	ldrb	r3, [r7, #23]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d101      	bne.n	80008d0 <_read+0x30>
      return 1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	e008      	b.n	80008e2 <_read+0x42>
    else
      return EIO;
 80008d0:	2305      	movs	r3, #5
 80008d2:	e006      	b.n	80008e2 <_read+0x42>
  }
  errno = EBADF;
 80008d4:	f003 fa1e 	bl	8003d14 <__errno>
 80008d8:	4603      	mov	r3, r0
 80008da:	2209      	movs	r2, #9
 80008dc:	601a      	str	r2, [r3, #0]
  return -1;
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000548 	.word	0x20000548

080008f0 <_fstat>:
int _fstat(int fd, struct stat* st) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <=  STDERR_FILENO) {
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db08      	blt.n	8000912 <_fstat+0x22>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b02      	cmp	r3, #2
 8000904:	dc05      	bgt.n	8000912 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800090c:	605a      	str	r2, [r3, #4]
    return 0;
 800090e:	2300      	movs	r3, #0
 8000910:	e005      	b.n	800091e <_fstat+0x2e>
  }
  errno = EBADF;
 8000912:	f003 f9ff 	bl	8003d14 <__errno>
 8000916:	4603      	mov	r3, r0
 8000918:	2209      	movs	r2, #9
 800091a:	601a      	str	r2, [r3, #0]
  return 0;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <HAL_MspInit+0x54>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <HAL_MspInit+0x54>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6193      	str	r3, [r2, #24]
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_MspInit+0x54>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_MspInit+0x54>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a0c      	ldr	r2, [pc, #48]	; (800097c <HAL_MspInit+0x54>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	61d3      	str	r3, [r2, #28]
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_MspInit+0x54>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_MspInit+0x58>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_MspInit+0x58>)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	40021000 	.word	0x40021000
 8000980:	40010000 	.word	0x40010000

08000984 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0318 	add.w	r3, r7, #24
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a28      	ldr	r2, [pc, #160]	; (8000a40 <HAL_ADC_MspInit+0xbc>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d122      	bne.n	80009ea <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <HAL_ADC_MspInit+0xc0>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a26      	ldr	r2, [pc, #152]	; (8000a44 <HAL_ADC_MspInit+0xc0>)
 80009aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <HAL_ADC_MspInit+0xc0>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <HAL_ADC_MspInit+0xc0>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a20      	ldr	r2, [pc, #128]	; (8000a44 <HAL_ADC_MspInit+0xc0>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <HAL_ADC_MspInit+0xc0>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009d4:	2310      	movs	r3, #16
 80009d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d8:	2303      	movs	r3, #3
 80009da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0318 	add.w	r3, r7, #24
 80009e0:	4619      	mov	r1, r3
 80009e2:	4819      	ldr	r0, [pc, #100]	; (8000a48 <HAL_ADC_MspInit+0xc4>)
 80009e4:	f000 ffce 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80009e8:	e026      	b.n	8000a38 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_ADC_MspInit+0xc8>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d121      	bne.n	8000a38 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <HAL_ADC_MspInit+0xc0>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <HAL_ADC_MspInit+0xc0>)
 80009fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <HAL_ADC_MspInit+0xc0>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_ADC_MspInit+0xc0>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a0c      	ldr	r2, [pc, #48]	; (8000a44 <HAL_ADC_MspInit+0xc0>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_ADC_MspInit+0xc0>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a24:	2320      	movs	r3, #32
 8000a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 0318 	add.w	r3, r7, #24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <HAL_ADC_MspInit+0xc4>)
 8000a34:	f000 ffa6 	bl	8001984 <HAL_GPIO_Init>
}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40012400 	.word	0x40012400
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40010800 	.word	0x40010800
 8000a4c:	40012800 	.word	0x40012800

08000a50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a25      	ldr	r2, [pc, #148]	; (8000b00 <HAL_CAN_MspInit+0xb0>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d143      	bne.n	8000af8 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a70:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <HAL_CAN_MspInit+0xb4>)
 8000a72:	69db      	ldr	r3, [r3, #28]
 8000a74:	4a23      	ldr	r2, [pc, #140]	; (8000b04 <HAL_CAN_MspInit+0xb4>)
 8000a76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a7a:	61d3      	str	r3, [r2, #28]
 8000a7c:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <HAL_CAN_MspInit+0xb4>)
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a88:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <HAL_CAN_MspInit+0xb4>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a1d      	ldr	r2, [pc, #116]	; (8000b04 <HAL_CAN_MspInit+0xb4>)
 8000a8e:	f043 0308 	orr.w	r3, r3, #8
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <HAL_CAN_MspInit+0xb4>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0308 	and.w	r3, r3, #8
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4814      	ldr	r0, [pc, #80]	; (8000b08 <HAL_CAN_MspInit+0xb8>)
 8000ab6:	f000 ff65 	bl	8001984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <HAL_CAN_MspInit+0xb8>)
 8000ad0:	f000 ff58 	bl	8001984 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <HAL_CAN_MspInit+0xbc>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
 8000af2:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <HAL_CAN_MspInit+0xbc>)
 8000af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	; 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40006400 	.word	0x40006400
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40010c00 	.word	0x40010c00
 8000b0c:	40010000 	.word	0x40010000

08000b10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <HAL_RTC_MspInit+0x3c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d110      	bne.n	8000b44 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000b22:	f001 f9ed 	bl	8001f00 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_RTC_MspInit+0x40>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <HAL_RTC_MspInit+0x40>)
 8000b2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <HAL_RTC_MspInit+0x40>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_RTC_MspInit+0x44>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40002800 	.word	0x40002800
 8000b50:	40021000 	.word	0x40021000
 8000b54:	4242043c 	.word	0x4242043c

08000b58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a1c      	ldr	r2, [pc, #112]	; (8000be4 <HAL_SPI_MspInit+0x8c>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d131      	bne.n	8000bdc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <HAL_SPI_MspInit+0x90>)
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <HAL_SPI_MspInit+0x90>)
 8000b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b82:	61d3      	str	r3, [r2, #28]
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_SPI_MspInit+0x90>)
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_SPI_MspInit+0x90>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <HAL_SPI_MspInit+0x90>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_SPI_MspInit+0x90>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0308 	and.w	r3, r3, #8
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000ba8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000bac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <HAL_SPI_MspInit+0x94>)
 8000bbe:	f000 fee1 	bl	8001984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000bc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <HAL_SPI_MspInit+0x94>)
 8000bd8:	f000 fed4 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	3720      	adds	r7, #32
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40003800 	.word	0x40003800
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010c00 	.word	0x40010c00

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08c      	sub	sp, #48	; 0x30
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0320 	add.w	r3, r7, #32
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a57      	ldr	r2, [pc, #348]	; (8000d68 <HAL_UART_MspInit+0x178>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d13a      	bne.n	8000c86 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c10:	4b56      	ldr	r3, [pc, #344]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a55      	ldr	r2, [pc, #340]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000c16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b53      	ldr	r3, [pc, #332]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a4f      	ldr	r2, [pc, #316]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b4d      	ldr	r3, [pc, #308]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0320 	add.w	r3, r7, #32
 8000c52:	4619      	mov	r1, r3
 8000c54:	4846      	ldr	r0, [pc, #280]	; (8000d70 <HAL_UART_MspInit+0x180>)
 8000c56:	f000 fe95 	bl	8001984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0320 	add.w	r3, r7, #32
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4840      	ldr	r0, [pc, #256]	; (8000d70 <HAL_UART_MspInit+0x180>)
 8000c70:	f000 fe88 	bl	8001984 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2100      	movs	r1, #0
 8000c78:	2025      	movs	r0, #37	; 0x25
 8000c7a:	f000 fd9c 	bl	80017b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c7e:	2025      	movs	r0, #37	; 0x25
 8000c80:	f000 fdb5 	bl	80017ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c84:	e06c      	b.n	8000d60 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a3a      	ldr	r2, [pc, #232]	; (8000d74 <HAL_UART_MspInit+0x184>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d130      	bne.n	8000cf2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c90:	4b36      	ldr	r3, [pc, #216]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	4a35      	ldr	r2, [pc, #212]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9a:	61d3      	str	r3, [r2, #28]
 8000c9c:	4b33      	ldr	r3, [pc, #204]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000c9e:	69db      	ldr	r3, [r3, #28]
 8000ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a2f      	ldr	r2, [pc, #188]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4827      	ldr	r0, [pc, #156]	; (8000d70 <HAL_UART_MspInit+0x180>)
 8000cd4:	f000 fe56 	bl	8001984 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0320 	add.w	r3, r7, #32
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4821      	ldr	r0, [pc, #132]	; (8000d70 <HAL_UART_MspInit+0x180>)
 8000cec:	f000 fe4a 	bl	8001984 <HAL_GPIO_Init>
}
 8000cf0:	e036      	b.n	8000d60 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART3)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a20      	ldr	r2, [pc, #128]	; (8000d78 <HAL_UART_MspInit+0x188>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d131      	bne.n	8000d60 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000d02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d06:	61d3      	str	r3, [r2, #28]
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_UART_MspInit+0x17c>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 0320 	add.w	r3, r7, #32
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480e      	ldr	r0, [pc, #56]	; (8000d7c <HAL_UART_MspInit+0x18c>)
 8000d42:	f000 fe1f 	bl	8001984 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 0320 	add.w	r3, r7, #32
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4808      	ldr	r0, [pc, #32]	; (8000d7c <HAL_UART_MspInit+0x18c>)
 8000d5c:	f000 fe12 	bl	8001984 <HAL_GPIO_Init>
}
 8000d60:	bf00      	nop
 8000d62:	3730      	adds	r7, #48	; 0x30
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40013800 	.word	0x40013800
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010800 	.word	0x40010800
 8000d74:	40004400 	.word	0x40004400
 8000d78:	40004800 	.word	0x40004800
 8000d7c:	40010c00 	.word	0x40010c00

08000d80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <HAL_PCD_MspInit+0x34>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d10b      	bne.n	8000daa <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_PCD_MspInit+0x38>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <HAL_PCD_MspInit+0x38>)
 8000d98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d9c:	61d3      	str	r3, [r2, #28]
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_PCD_MspInit+0x38>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	40005c00 	.word	0x40005c00
 8000db8:	40021000 	.word	0x40021000

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <NMI_Handler+0x4>

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr

08000df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr

08000dfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e02:	f000 f8b5 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <USART1_IRQHandler+0x10>)
 8000e12:	f002 f95d 	bl	80030d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200001c0 	.word	0x200001c0

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f002 ff60 	bl	8003d14 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20005000 	.word	0x20005000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	2000008c 	.word	0x2000008c
 8000e88:	200007c0 	.word	0x200007c0

08000e8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e9a:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb0:	4c0a      	ldr	r4, [pc, #40]	; (8000edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ebe:	f7ff ffe5 	bl	8000e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f002 ff2d 	bl	8003d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ec6:	f7ff f941 	bl	800014c <main>
  bx lr
 8000eca:	4770      	bx	lr
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ed4:	08004a1c 	.word	0x08004a1c
  ldr r2, =_sbss
 8000ed8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000edc:	200007c0 	.word	0x200007c0

08000ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_2_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_Init+0x28>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_Init+0x28>)
 8000eee:	f043 0310 	orr.w	r3, r3, #16
 8000ef2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 fc53 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	200f      	movs	r0, #15
 8000efc:	f000 f808 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f00:	f7ff fd12 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40022000 	.word	0x40022000

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x54>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x58>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fc6b 	bl	800180a <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00e      	b.n	8000f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d80a      	bhi.n	8000f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f000 fc33 	bl	80017b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_InitTick+0x5c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000004 	.word	0x20000004

08000f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x1c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_IncTick+0x20>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a03      	ldr	r2, [pc, #12]	; (8000f90 <HAL_IncTick+0x20>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	2000054c 	.word	0x2000054c

08000f94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <HAL_GetTick+0x10>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	2000054c 	.word	0x2000054c

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff fff0 	bl	8000f94 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffe0 	bl	8000f94 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008

08000ff0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e0be      	b.n	8001190 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	2b00      	cmp	r3, #0
 800101e:	d109      	bne.n	8001034 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff fca8 	bl	8000984 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 f9ab 	bl	8001390 <ADC_ConversionStop_Disable>
 800103a:	4603      	mov	r3, r0
 800103c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	2b00      	cmp	r3, #0
 8001048:	f040 8099 	bne.w	800117e <HAL_ADC_Init+0x18e>
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	2b00      	cmp	r3, #0
 8001050:	f040 8095 	bne.w	800117e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001058:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800105c:	f023 0302 	bic.w	r3, r3, #2
 8001060:	f043 0202 	orr.w	r2, r3, #2
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001070:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7b1b      	ldrb	r3, [r3, #12]
 8001076:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001078:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	4313      	orrs	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001088:	d003      	beq.n	8001092 <HAL_ADC_Init+0xa2>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d102      	bne.n	8001098 <HAL_ADC_Init+0xa8>
 8001092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001096:	e000      	b.n	800109a <HAL_ADC_Init+0xaa>
 8001098:	2300      	movs	r3, #0
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7d1b      	ldrb	r3, [r3, #20]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d119      	bne.n	80010dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7b1b      	ldrb	r3, [r3, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d109      	bne.n	80010c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	035a      	lsls	r2, r3, #13
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	e00b      	b.n	80010dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	f043 0220 	orr.w	r2, r3, #32
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d4:	f043 0201 	orr.w	r2, r3, #1
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <HAL_ADC_Init+0x1a8>)
 80010f8:	4013      	ands	r3, r2
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	68b9      	ldr	r1, [r7, #8]
 8001100:	430b      	orrs	r3, r1
 8001102:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800110c:	d003      	beq.n	8001116 <HAL_ADC_Init+0x126>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d104      	bne.n	8001120 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	3b01      	subs	r3, #1
 800111c:	051b      	lsls	r3, r3, #20
 800111e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001126:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	430a      	orrs	r2, r1
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_ADC_Init+0x1ac>)
 800113c:	4013      	ands	r3, r2
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	429a      	cmp	r2, r3
 8001142:	d10b      	bne.n	800115c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114e:	f023 0303 	bic.w	r3, r3, #3
 8001152:	f043 0201 	orr.w	r2, r3, #1
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800115a:	e018      	b.n	800118e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	f023 0312 	bic.w	r3, r3, #18
 8001164:	f043 0210 	orr.w	r2, r3, #16
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	f043 0201 	orr.w	r2, r3, #1
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800117c:	e007      	b.n	800118e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	f043 0210 	orr.w	r2, r3, #16
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800118e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	ffe1f7fd 	.word	0xffe1f7fd
 800119c:	ff1f0efe 	.word	0xff1f0efe

080011a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d101      	bne.n	80011c0 <HAL_ADC_ConfigChannel+0x20>
 80011bc:	2302      	movs	r3, #2
 80011be:	e0dc      	b.n	800137a <HAL_ADC_ConfigChannel+0x1da>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b06      	cmp	r3, #6
 80011ce:	d81c      	bhi.n	800120a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	3b05      	subs	r3, #5
 80011e2:	221f      	movs	r2, #31
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	4019      	ands	r1, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	3b05      	subs	r3, #5
 80011fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	635a      	str	r2, [r3, #52]	; 0x34
 8001208:	e03c      	b.n	8001284 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b0c      	cmp	r3, #12
 8001210:	d81c      	bhi.n	800124c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	3b23      	subs	r3, #35	; 0x23
 8001224:	221f      	movs	r2, #31
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	4019      	ands	r1, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	3b23      	subs	r3, #35	; 0x23
 800123e:	fa00 f203 	lsl.w	r2, r0, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	430a      	orrs	r2, r1
 8001248:	631a      	str	r2, [r3, #48]	; 0x30
 800124a:	e01b      	b.n	8001284 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	3b41      	subs	r3, #65	; 0x41
 800125e:	221f      	movs	r2, #31
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	4019      	ands	r1, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	3b41      	subs	r3, #65	; 0x41
 8001278:	fa00 f203 	lsl.w	r2, r0, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b09      	cmp	r3, #9
 800128a:	d91c      	bls.n	80012c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68d9      	ldr	r1, [r3, #12]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	3b1e      	subs	r3, #30
 800129e:	2207      	movs	r2, #7
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	4019      	ands	r1, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	6898      	ldr	r0, [r3, #8]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	3b1e      	subs	r3, #30
 80012b8:	fa00 f203 	lsl.w	r2, r0, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	e019      	b.n	80012fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6919      	ldr	r1, [r3, #16]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	2207      	movs	r2, #7
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	4019      	ands	r1, r3
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	6898      	ldr	r0, [r3, #8]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	fa00 f203 	lsl.w	r2, r0, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b10      	cmp	r3, #16
 8001300:	d003      	beq.n	800130a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001306:	2b11      	cmp	r3, #17
 8001308:	d132      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <HAL_ADC_ConfigChannel+0x1e4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d125      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d126      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001330:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b10      	cmp	r3, #16
 8001338:	d11a      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <HAL_ADC_ConfigChannel+0x1e8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a13      	ldr	r2, [pc, #76]	; (800138c <HAL_ADC_ConfigChannel+0x1ec>)
 8001340:	fba2 2303 	umull	r2, r3, r2, r3
 8001344:	0c9a      	lsrs	r2, r3, #18
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001350:	e002      	b.n	8001358 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	3b01      	subs	r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f9      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x1b2>
 800135e:	e007      	b.n	8001370 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	f043 0220 	orr.w	r2, r3, #32
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	40012400 	.word	0x40012400
 8001388:	20000000 	.word	0x20000000
 800138c:	431bde83 	.word	0x431bde83

08001390 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d12e      	bne.n	8001408 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0201 	bic.w	r2, r2, #1
 80013b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013ba:	f7ff fdeb 	bl	8000f94 <HAL_GetTick>
 80013be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013c0:	e01b      	b.n	80013fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013c2:	f7ff fde7 	bl	8000f94 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d914      	bls.n	80013fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d10d      	bne.n	80013fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e2:	f043 0210 	orr.w	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e007      	b.n	800140a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b01      	cmp	r3, #1
 8001406:	d0dc      	beq.n	80013c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0ed      	b.n	8001600 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fb0d 	bl	8000a50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 0201 	orr.w	r2, r2, #1
 8001444:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001446:	f7ff fda5 	bl	8000f94 <HAL_GetTick>
 800144a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800144c:	e012      	b.n	8001474 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800144e:	f7ff fda1 	bl	8000f94 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b0a      	cmp	r3, #10
 800145a:	d90b      	bls.n	8001474 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2205      	movs	r2, #5
 800146c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0c5      	b.n	8001600 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0e5      	beq.n	800144e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0202 	bic.w	r2, r2, #2
 8001490:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001492:	f7ff fd7f 	bl	8000f94 <HAL_GetTick>
 8001496:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001498:	e012      	b.n	80014c0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800149a:	f7ff fd7b 	bl	8000f94 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b0a      	cmp	r3, #10
 80014a6:	d90b      	bls.n	80014c0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2205      	movs	r2, #5
 80014b8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e09f      	b.n	8001600 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1e5      	bne.n	800149a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7e1b      	ldrb	r3, [r3, #24]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d108      	bne.n	80014e8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	e007      	b.n	80014f8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7e5b      	ldrb	r3, [r3, #25]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d108      	bne.n	8001512 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	e007      	b.n	8001522 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7e9b      	ldrb	r3, [r3, #26]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d108      	bne.n	800153c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0220 	orr.w	r2, r2, #32
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e007      	b.n	800154c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0220 	bic.w	r2, r2, #32
 800154a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7edb      	ldrb	r3, [r3, #27]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d108      	bne.n	8001566 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0210 	bic.w	r2, r2, #16
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	e007      	b.n	8001576 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 0210 	orr.w	r2, r2, #16
 8001574:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7f1b      	ldrb	r3, [r3, #28]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d108      	bne.n	8001590 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0208 	orr.w	r2, r2, #8
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	e007      	b.n	80015a0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0208 	bic.w	r2, r2, #8
 800159e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7f5b      	ldrb	r3, [r3, #29]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d108      	bne.n	80015ba <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0204 	orr.w	r2, r2, #4
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e007      	b.n	80015ca <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0204 	bic.w	r2, r2, #4
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	ea42 0103 	orr.w	r1, r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	1e5a      	subs	r2, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db0b      	blt.n	8001696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 021f 	and.w	r2, r3, #31
 8001684:	4906      	ldr	r1, [pc, #24]	; (80016a0 <__NVIC_EnableIRQ+0x34>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	2001      	movs	r0, #1
 800168e:	fa00 f202 	lsl.w	r2, r0, r2
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
         );
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800176c:	d301      	bcc.n	8001772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176e:	2301      	movs	r3, #1
 8001770:	e00f      	b.n	8001792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <SysTick_Config+0x40>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177a:	210f      	movs	r1, #15
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f7ff ff90 	bl	80016a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <SysTick_Config+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <SysTick_Config+0x40>)
 800178c:	2207      	movs	r2, #7
 800178e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff2d 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff42 	bl	8001650 <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ff90 	bl	80016f8 <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff5f 	bl	80016a4 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff35 	bl	800166c <__NVIC_EnableIRQ>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ffa2 	bl	800175c <SysTick_Config>
 8001818:	4603      	mov	r3, r0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001822:	b480      	push	{r7}
 8001824:	b085      	sub	sp, #20
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001834:	2b02      	cmp	r3, #2
 8001836:	d008      	beq.n	800184a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2204      	movs	r2, #4
 800183c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e020      	b.n	800188c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 020e 	bic.w	r2, r2, #14
 8001858:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0201 	bic.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001872:	2101      	movs	r1, #1
 8001874:	fa01 f202 	lsl.w	r2, r1, r2
 8001878:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800188a:	7bfb      	ldrb	r3, [r7, #15]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
	...

08001898 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d005      	beq.n	80018ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2204      	movs	r2, #4
 80018b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	e051      	b.n	800195e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 020e 	bic.w	r2, r2, #14
 80018c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0201 	bic.w	r2, r2, #1
 80018d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a22      	ldr	r2, [pc, #136]	; (8001968 <HAL_DMA_Abort_IT+0xd0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d029      	beq.n	8001938 <HAL_DMA_Abort_IT+0xa0>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a20      	ldr	r2, [pc, #128]	; (800196c <HAL_DMA_Abort_IT+0xd4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d022      	beq.n	8001934 <HAL_DMA_Abort_IT+0x9c>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <HAL_DMA_Abort_IT+0xd8>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d01a      	beq.n	800192e <HAL_DMA_Abort_IT+0x96>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a1d      	ldr	r2, [pc, #116]	; (8001974 <HAL_DMA_Abort_IT+0xdc>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d012      	beq.n	8001928 <HAL_DMA_Abort_IT+0x90>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <HAL_DMA_Abort_IT+0xe0>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d00a      	beq.n	8001922 <HAL_DMA_Abort_IT+0x8a>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a1a      	ldr	r2, [pc, #104]	; (800197c <HAL_DMA_Abort_IT+0xe4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d102      	bne.n	800191c <HAL_DMA_Abort_IT+0x84>
 8001916:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800191a:	e00e      	b.n	800193a <HAL_DMA_Abort_IT+0xa2>
 800191c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001920:	e00b      	b.n	800193a <HAL_DMA_Abort_IT+0xa2>
 8001922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001926:	e008      	b.n	800193a <HAL_DMA_Abort_IT+0xa2>
 8001928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192c:	e005      	b.n	800193a <HAL_DMA_Abort_IT+0xa2>
 800192e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001932:	e002      	b.n	800193a <HAL_DMA_Abort_IT+0xa2>
 8001934:	2310      	movs	r3, #16
 8001936:	e000      	b.n	800193a <HAL_DMA_Abort_IT+0xa2>
 8001938:	2301      	movs	r3, #1
 800193a:	4a11      	ldr	r2, [pc, #68]	; (8001980 <HAL_DMA_Abort_IT+0xe8>)
 800193c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	4798      	blx	r3
    } 
  }
  return status;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40020008 	.word	0x40020008
 800196c:	4002001c 	.word	0x4002001c
 8001970:	40020030 	.word	0x40020030
 8001974:	40020044 	.word	0x40020044
 8001978:	40020058 	.word	0x40020058
 800197c:	4002006c 	.word	0x4002006c
 8001980:	40020000 	.word	0x40020000

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b08b      	sub	sp, #44	; 0x2c
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001996:	e169      	b.n	8001c6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001998:	2201      	movs	r2, #1
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	f040 8158 	bne.w	8001c66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4a9a      	ldr	r2, [pc, #616]	; (8001c24 <HAL_GPIO_Init+0x2a0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d05e      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019c0:	4a98      	ldr	r2, [pc, #608]	; (8001c24 <HAL_GPIO_Init+0x2a0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d875      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019c6:	4a98      	ldr	r2, [pc, #608]	; (8001c28 <HAL_GPIO_Init+0x2a4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d058      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019cc:	4a96      	ldr	r2, [pc, #600]	; (8001c28 <HAL_GPIO_Init+0x2a4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d86f      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019d2:	4a96      	ldr	r2, [pc, #600]	; (8001c2c <HAL_GPIO_Init+0x2a8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d052      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019d8:	4a94      	ldr	r2, [pc, #592]	; (8001c2c <HAL_GPIO_Init+0x2a8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d869      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019de:	4a94      	ldr	r2, [pc, #592]	; (8001c30 <HAL_GPIO_Init+0x2ac>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d04c      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019e4:	4a92      	ldr	r2, [pc, #584]	; (8001c30 <HAL_GPIO_Init+0x2ac>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d863      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019ea:	4a92      	ldr	r2, [pc, #584]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d046      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019f0:	4a90      	ldr	r2, [pc, #576]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d85d      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d82a      	bhi.n	8001a50 <HAL_GPIO_Init+0xcc>
 80019fa:	2b12      	cmp	r3, #18
 80019fc:	d859      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019fe:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <HAL_GPIO_Init+0x80>)
 8001a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a04:	08001a7f 	.word	0x08001a7f
 8001a08:	08001a59 	.word	0x08001a59
 8001a0c:	08001a6b 	.word	0x08001a6b
 8001a10:	08001aad 	.word	0x08001aad
 8001a14:	08001ab3 	.word	0x08001ab3
 8001a18:	08001ab3 	.word	0x08001ab3
 8001a1c:	08001ab3 	.word	0x08001ab3
 8001a20:	08001ab3 	.word	0x08001ab3
 8001a24:	08001ab3 	.word	0x08001ab3
 8001a28:	08001ab3 	.word	0x08001ab3
 8001a2c:	08001ab3 	.word	0x08001ab3
 8001a30:	08001ab3 	.word	0x08001ab3
 8001a34:	08001ab3 	.word	0x08001ab3
 8001a38:	08001ab3 	.word	0x08001ab3
 8001a3c:	08001ab3 	.word	0x08001ab3
 8001a40:	08001ab3 	.word	0x08001ab3
 8001a44:	08001ab3 	.word	0x08001ab3
 8001a48:	08001a61 	.word	0x08001a61
 8001a4c:	08001a75 	.word	0x08001a75
 8001a50:	4a79      	ldr	r2, [pc, #484]	; (8001c38 <HAL_GPIO_Init+0x2b4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a56:	e02c      	b.n	8001ab2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	623b      	str	r3, [r7, #32]
          break;
 8001a5e:	e029      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	3304      	adds	r3, #4
 8001a66:	623b      	str	r3, [r7, #32]
          break;
 8001a68:	e024      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	3308      	adds	r3, #8
 8001a70:	623b      	str	r3, [r7, #32]
          break;
 8001a72:	e01f      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	330c      	adds	r3, #12
 8001a7a:	623b      	str	r3, [r7, #32]
          break;
 8001a7c:	e01a      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a86:	2304      	movs	r3, #4
 8001a88:	623b      	str	r3, [r7, #32]
          break;
 8001a8a:	e013      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d105      	bne.n	8001aa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a94:	2308      	movs	r3, #8
 8001a96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	611a      	str	r2, [r3, #16]
          break;
 8001a9e:	e009      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	615a      	str	r2, [r3, #20]
          break;
 8001aaa:	e003      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
          break;
 8001ab0:	e000      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          break;
 8001ab2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2bff      	cmp	r3, #255	; 0xff
 8001ab8:	d801      	bhi.n	8001abe <HAL_GPIO_Init+0x13a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	e001      	b.n	8001ac2 <HAL_GPIO_Init+0x13e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2bff      	cmp	r3, #255	; 0xff
 8001ac8:	d802      	bhi.n	8001ad0 <HAL_GPIO_Init+0x14c>
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	e002      	b.n	8001ad6 <HAL_GPIO_Init+0x152>
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	3b08      	subs	r3, #8
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	210f      	movs	r1, #15
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	6a39      	ldr	r1, [r7, #32]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	431a      	orrs	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80b1 	beq.w	8001c66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b04:	4b4d      	ldr	r3, [pc, #308]	; (8001c3c <HAL_GPIO_Init+0x2b8>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a4c      	ldr	r2, [pc, #304]	; (8001c3c <HAL_GPIO_Init+0x2b8>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <HAL_GPIO_Init+0x2b8>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b1c:	4a48      	ldr	r2, [pc, #288]	; (8001c40 <HAL_GPIO_Init+0x2bc>)
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	3302      	adds	r3, #2
 8001b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	220f      	movs	r2, #15
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a40      	ldr	r2, [pc, #256]	; (8001c44 <HAL_GPIO_Init+0x2c0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d013      	beq.n	8001b70 <HAL_GPIO_Init+0x1ec>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a3f      	ldr	r2, [pc, #252]	; (8001c48 <HAL_GPIO_Init+0x2c4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d00d      	beq.n	8001b6c <HAL_GPIO_Init+0x1e8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a3e      	ldr	r2, [pc, #248]	; (8001c4c <HAL_GPIO_Init+0x2c8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d007      	beq.n	8001b68 <HAL_GPIO_Init+0x1e4>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a3d      	ldr	r2, [pc, #244]	; (8001c50 <HAL_GPIO_Init+0x2cc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d101      	bne.n	8001b64 <HAL_GPIO_Init+0x1e0>
 8001b60:	2303      	movs	r3, #3
 8001b62:	e006      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b64:	2304      	movs	r3, #4
 8001b66:	e004      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e002      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b70:	2300      	movs	r3, #0
 8001b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b74:	f002 0203 	and.w	r2, r2, #3
 8001b78:	0092      	lsls	r2, r2, #2
 8001b7a:	4093      	lsls	r3, r2
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b82:	492f      	ldr	r1, [pc, #188]	; (8001c40 <HAL_GPIO_Init+0x2bc>)
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	492c      	ldr	r1, [pc, #176]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001baa:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	4928      	ldr	r1, [pc, #160]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d006      	beq.n	8001bd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bc4:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4922      	ldr	r1, [pc, #136]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	491e      	ldr	r1, [pc, #120]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d006      	beq.n	8001bfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	4918      	ldr	r1, [pc, #96]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4914      	ldr	r1, [pc, #80]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d021      	beq.n	8001c58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	490e      	ldr	r1, [pc, #56]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60cb      	str	r3, [r1, #12]
 8001c20:	e021      	b.n	8001c66 <HAL_GPIO_Init+0x2e2>
 8001c22:	bf00      	nop
 8001c24:	10320000 	.word	0x10320000
 8001c28:	10310000 	.word	0x10310000
 8001c2c:	10220000 	.word	0x10220000
 8001c30:	10210000 	.word	0x10210000
 8001c34:	10120000 	.word	0x10120000
 8001c38:	10110000 	.word	0x10110000
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010000 	.word	0x40010000
 8001c44:	40010800 	.word	0x40010800
 8001c48:	40010c00 	.word	0x40010c00
 8001c4c:	40011000 	.word	0x40011000
 8001c50:	40011400 	.word	0x40011400
 8001c54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_GPIO_Init+0x304>)
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	4909      	ldr	r1, [pc, #36]	; (8001c88 <HAL_GPIO_Init+0x304>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3301      	adds	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	fa22 f303 	lsr.w	r3, r2, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f47f ae8e 	bne.w	8001998 <HAL_GPIO_Init+0x14>
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	372c      	adds	r7, #44	; 0x2c
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	40010400 	.word	0x40010400

08001c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	e001      	b.n	8001cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	807b      	strh	r3, [r7, #2]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cca:	787b      	ldrb	r3, [r7, #1]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd0:	887a      	ldrh	r2, [r7, #2]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cd6:	e003      	b.n	8001ce0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	041a      	lsls	r2, r3, #16
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	611a      	str	r2, [r3, #16]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cec:	b08b      	sub	sp, #44	; 0x2c
 8001cee:	af06      	add	r7, sp, #24
 8001cf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0fd      	b.n	8001ef8 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d106      	bne.n	8001d16 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff f835 	bl	8000d80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2203      	movs	r2, #3
 8001d1a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 fe0c 	bl	8003940 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	687e      	ldr	r6, [r7, #4]
 8001d30:	466d      	mov	r5, sp
 8001d32:	f106 0410 	add.w	r4, r6, #16
 8001d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	602b      	str	r3, [r5, #0]
 8001d3e:	1d33      	adds	r3, r6, #4
 8001d40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d42:	6838      	ldr	r0, [r7, #0]
 8001d44:	f001 fdec 	bl	8003920 <USB_CoreInit>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2202      	movs	r2, #2
 8001d52:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0ce      	b.n	8001ef8 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f001 fe07 	bl	8003974 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	e04c      	b.n	8001e06 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	b298      	uxth	r0, r3
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	440b      	add	r3, r1
 8001da8:	3336      	adds	r3, #54	; 0x36
 8001daa:	4602      	mov	r2, r0
 8001dac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3303      	adds	r3, #3
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3338      	adds	r3, #56	; 0x38
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	440b      	add	r3, r1
 8001de6:	333c      	adds	r3, #60	; 0x3c
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	440b      	add	r3, r1
 8001dfa:	3340      	adds	r3, #64	; 0x40
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	3301      	adds	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d3ad      	bcc.n	8001d6c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e044      	b.n	8001ea0 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e16:	7bfa      	ldrb	r2, [r7, #15]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	440b      	add	r3, r1
 8001e24:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	440b      	add	r3, r1
 8001e3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	440b      	add	r3, r1
 8001e66:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d3b5      	bcc.n	8001e16 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	687e      	ldr	r6, [r7, #4]
 8001eb2:	466d      	mov	r5, sp
 8001eb4:	f106 0410 	add.w	r4, r6, #16
 8001eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	602b      	str	r3, [r5, #0]
 8001ec0:	1d33      	adds	r3, r6, #4
 8001ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec4:	6838      	ldr	r0, [r7, #0]
 8001ec6:	f001 fd61 	bl	800398c <USB_DevInit>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e00d      	b.n	8001ef8 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f001 fd6b 	bl	80039cc <USB_DevDisconnect>

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f00 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	420e0020 	.word	0x420e0020

08001f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e26c      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8087 	beq.w	8002046 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f38:	4b92      	ldr	r3, [pc, #584]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d00c      	beq.n	8001f5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f44:	4b8f      	ldr	r3, [pc, #572]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d112      	bne.n	8001f76 <HAL_RCC_OscConfig+0x5e>
 8001f50:	4b8c      	ldr	r3, [pc, #560]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5c:	d10b      	bne.n	8001f76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5e:	4b89      	ldr	r3, [pc, #548]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d06c      	beq.n	8002044 <HAL_RCC_OscConfig+0x12c>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d168      	bne.n	8002044 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e246      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x76>
 8001f80:	4b80      	ldr	r3, [pc, #512]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a7f      	ldr	r2, [pc, #508]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	e02e      	b.n	8001fec <HAL_RCC_OscConfig+0xd4>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x98>
 8001f96:	4b7b      	ldr	r3, [pc, #492]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a7a      	ldr	r2, [pc, #488]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b78      	ldr	r3, [pc, #480]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a77      	ldr	r2, [pc, #476]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e01d      	b.n	8001fec <HAL_RCC_OscConfig+0xd4>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0xbc>
 8001fba:	4b72      	ldr	r3, [pc, #456]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a71      	ldr	r2, [pc, #452]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b6f      	ldr	r3, [pc, #444]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a6e      	ldr	r2, [pc, #440]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_OscConfig+0xd4>
 8001fd4:	4b6b      	ldr	r3, [pc, #428]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a6a      	ldr	r2, [pc, #424]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b68      	ldr	r3, [pc, #416]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a67      	ldr	r2, [pc, #412]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7fe ffce 	bl	8000f94 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7fe ffca 	bl	8000f94 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e1fa      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b5d      	ldr	r3, [pc, #372]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0xe4>
 800201a:	e014      	b.n	8002046 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7fe ffba 	bl	8000f94 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7fe ffb6 	bl	8000f94 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1e6      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002036:	4b53      	ldr	r3, [pc, #332]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x10c>
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d063      	beq.n	800211a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002052:	4b4c      	ldr	r3, [pc, #304]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800205e:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b08      	cmp	r3, #8
 8002068:	d11c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x18c>
 800206a:	4b46      	ldr	r3, [pc, #280]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d116      	bne.n	80020a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002076:	4b43      	ldr	r3, [pc, #268]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_RCC_OscConfig+0x176>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e1ba      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208e:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4939      	ldr	r1, [pc, #228]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a2:	e03a      	b.n	800211a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d020      	beq.n	80020ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ac:	4b36      	ldr	r3, [pc, #216]	; (8002188 <HAL_RCC_OscConfig+0x270>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7fe ff6f 	bl	8000f94 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ba:	f7fe ff6b 	bl	8000f94 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e19b      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d8:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4927      	ldr	r1, [pc, #156]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]
 80020ec:	e015      	b.n	800211a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ee:	4b26      	ldr	r3, [pc, #152]	; (8002188 <HAL_RCC_OscConfig+0x270>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7fe ff4e 	bl	8000f94 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fc:	f7fe ff4a 	bl	8000f94 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e17a      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d03a      	beq.n	800219c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d019      	beq.n	8002162 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002134:	f7fe ff2e 	bl	8000f94 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213c:	f7fe ff2a 	bl	8000f94 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e15a      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800215a:	2001      	movs	r0, #1
 800215c:	f000 fad8 	bl	8002710 <RCC_Delay>
 8002160:	e01c      	b.n	800219c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002168:	f7fe ff14 	bl	8000f94 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216e:	e00f      	b.n	8002190 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002170:	f7fe ff10 	bl	8000f94 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d908      	bls.n	8002190 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e140      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	42420000 	.word	0x42420000
 800218c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002190:	4b9e      	ldr	r3, [pc, #632]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1e9      	bne.n	8002170 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80a6 	beq.w	80022f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ae:	4b97      	ldr	r3, [pc, #604]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10d      	bne.n	80021d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	4b94      	ldr	r3, [pc, #592]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	4a93      	ldr	r2, [pc, #588]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	61d3      	str	r3, [r2, #28]
 80021c6:	4b91      	ldr	r3, [pc, #580]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d2:	2301      	movs	r3, #1
 80021d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d6:	4b8e      	ldr	r3, [pc, #568]	; (8002410 <HAL_RCC_OscConfig+0x4f8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d118      	bne.n	8002214 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e2:	4b8b      	ldr	r3, [pc, #556]	; (8002410 <HAL_RCC_OscConfig+0x4f8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a8a      	ldr	r2, [pc, #552]	; (8002410 <HAL_RCC_OscConfig+0x4f8>)
 80021e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ee:	f7fe fed1 	bl	8000f94 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f6:	f7fe fecd 	bl	8000f94 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b64      	cmp	r3, #100	; 0x64
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0fd      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	4b81      	ldr	r3, [pc, #516]	; (8002410 <HAL_RCC_OscConfig+0x4f8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x312>
 800221c:	4b7b      	ldr	r3, [pc, #492]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4a7a      	ldr	r2, [pc, #488]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6213      	str	r3, [r2, #32]
 8002228:	e02d      	b.n	8002286 <HAL_RCC_OscConfig+0x36e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0x334>
 8002232:	4b76      	ldr	r3, [pc, #472]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a75      	ldr	r2, [pc, #468]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6213      	str	r3, [r2, #32]
 800223e:	4b73      	ldr	r3, [pc, #460]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4a72      	ldr	r2, [pc, #456]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	6213      	str	r3, [r2, #32]
 800224a:	e01c      	b.n	8002286 <HAL_RCC_OscConfig+0x36e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b05      	cmp	r3, #5
 8002252:	d10c      	bne.n	800226e <HAL_RCC_OscConfig+0x356>
 8002254:	4b6d      	ldr	r3, [pc, #436]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4a6c      	ldr	r2, [pc, #432]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	6213      	str	r3, [r2, #32]
 8002260:	4b6a      	ldr	r3, [pc, #424]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4a69      	ldr	r2, [pc, #420]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6213      	str	r3, [r2, #32]
 800226c:	e00b      	b.n	8002286 <HAL_RCC_OscConfig+0x36e>
 800226e:	4b67      	ldr	r3, [pc, #412]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4a66      	ldr	r2, [pc, #408]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6213      	str	r3, [r2, #32]
 800227a:	4b64      	ldr	r3, [pc, #400]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	4a63      	ldr	r2, [pc, #396]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002280:	f023 0304 	bic.w	r3, r3, #4
 8002284:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d015      	beq.n	80022ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7fe fe81 	bl	8000f94 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7fe fe7d 	bl	8000f94 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e0ab      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ac:	4b57      	ldr	r3, [pc, #348]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ee      	beq.n	8002296 <HAL_RCC_OscConfig+0x37e>
 80022b8:	e014      	b.n	80022e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ba:	f7fe fe6b 	bl	8000f94 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c2:	f7fe fe67 	bl	8000f94 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e095      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d8:	4b4c      	ldr	r3, [pc, #304]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1ee      	bne.n	80022c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022e4:	7dfb      	ldrb	r3, [r7, #23]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d105      	bne.n	80022f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ea:	4b48      	ldr	r3, [pc, #288]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	4a47      	ldr	r2, [pc, #284]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8081 	beq.w	8002402 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002300:	4b42      	ldr	r3, [pc, #264]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b08      	cmp	r3, #8
 800230a:	d061      	beq.n	80023d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d146      	bne.n	80023a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_OscConfig+0x4fc>)
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7fe fe3b 	bl	8000f94 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002322:	f7fe fe37 	bl	8000f94 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e067      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002334:	4b35      	ldr	r3, [pc, #212]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f0      	bne.n	8002322 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002348:	d108      	bne.n	800235c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800234a:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	492d      	ldr	r1, [pc, #180]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800235c:	4b2b      	ldr	r3, [pc, #172]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a19      	ldr	r1, [r3, #32]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	430b      	orrs	r3, r1
 800236e:	4927      	ldr	r1, [pc, #156]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002374:	4b27      	ldr	r3, [pc, #156]	; (8002414 <HAL_RCC_OscConfig+0x4fc>)
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7fe fe0b 	bl	8000f94 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002382:	f7fe fe07 	bl	8000f94 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e037      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x46a>
 80023a0:	e02f      	b.n	8002402 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <HAL_RCC_OscConfig+0x4fc>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7fe fdf4 	bl	8000f94 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7fe fdf0 	bl	8000f94 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e020      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x498>
 80023ce:	e018      	b.n	8002402 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e013      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	40007000 	.word	0x40007000
 8002414:	42420060 	.word	0x42420060

08002418 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0d0      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800242c:	4b6a      	ldr	r3, [pc, #424]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d910      	bls.n	800245c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b67      	ldr	r3, [pc, #412]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0207 	bic.w	r2, r3, #7
 8002442:	4965      	ldr	r1, [pc, #404]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b63      	ldr	r3, [pc, #396]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0b8      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002474:	4b59      	ldr	r3, [pc, #356]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a58      	ldr	r2, [pc, #352]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800247e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800248c:	4b53      	ldr	r3, [pc, #332]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a52      	ldr	r2, [pc, #328]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002496:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002498:	4b50      	ldr	r3, [pc, #320]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	494d      	ldr	r1, [pc, #308]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d040      	beq.n	8002538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d115      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e07f      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d6:	4b41      	ldr	r3, [pc, #260]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e073      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	4b3d      	ldr	r3, [pc, #244]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e06b      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	4b39      	ldr	r3, [pc, #228]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f023 0203 	bic.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4936      	ldr	r1, [pc, #216]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002508:	f7fe fd44 	bl	8000f94 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7fe fd40 	bl	8000f94 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e053      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 020c 	and.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d1eb      	bne.n	8002510 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002538:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d210      	bcs.n	8002568 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 0207 	bic.w	r2, r3, #7
 800254e:	4922      	ldr	r1, [pc, #136]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e032      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4916      	ldr	r1, [pc, #88]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	490e      	ldr	r1, [pc, #56]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025a6:	f000 f821 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80025aa:	4602      	mov	r2, r0
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	490a      	ldr	r1, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025b8:	5ccb      	ldrb	r3, [r1, r3]
 80025ba:	fa22 f303 	lsr.w	r3, r2, r3
 80025be:	4a09      	ldr	r2, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x1cc>)
 80025c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_RCC_ClockConfig+0x1d0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fca2 	bl	8000f10 <HAL_InitTick>

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40021000 	.word	0x40021000
 80025e0:	08004998 	.word	0x08004998
 80025e4:	20000000 	.word	0x20000000
 80025e8:	20000004 	.word	0x20000004

080025ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	b490      	push	{r4, r7}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025f2:	4b2a      	ldr	r3, [pc, #168]	; (800269c <HAL_RCC_GetSysClockFreq+0xb0>)
 80025f4:	1d3c      	adds	r4, r7, #4
 80025f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025fc:	f240 2301 	movw	r3, #513	; 0x201
 8002600:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002616:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b04      	cmp	r3, #4
 8002624:	d002      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x40>
 8002626:	2b08      	cmp	r3, #8
 8002628:	d003      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x46>
 800262a:	e02d      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262e:	623b      	str	r3, [r7, #32]
      break;
 8002630:	e02d      	b.n	800268e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	0c9b      	lsrs	r3, r3, #18
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800263e:	4413      	add	r3, r2
 8002640:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002644:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d013      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	0c5b      	lsrs	r3, r3, #17
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800265e:	4413      	add	r3, r2
 8002660:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002664:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800266a:	fb02 f203 	mul.w	r2, r2, r3
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
 8002676:	e004      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800267c:	fb02 f303 	mul.w	r3, r2, r3
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	623b      	str	r3, [r7, #32]
      break;
 8002686:	e002      	b.n	800268e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800268a:	623b      	str	r3, [r7, #32]
      break;
 800268c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800268e:	6a3b      	ldr	r3, [r7, #32]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3728      	adds	r7, #40	; 0x28
 8002694:	46bd      	mov	sp, r7
 8002696:	bc90      	pop	{r4, r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	08004978 	.word	0x08004978
 80026a0:	40021000 	.word	0x40021000
 80026a4:	007a1200 	.word	0x007a1200
 80026a8:	003d0900 	.word	0x003d0900

080026ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b0:	4b02      	ldr	r3, [pc, #8]	; (80026bc <HAL_RCC_GetHCLKFreq+0x10>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	20000000 	.word	0x20000000

080026c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026c4:	f7ff fff2 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4903      	ldr	r1, [pc, #12]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000
 80026e4:	080049a8 	.word	0x080049a8

080026e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026ec:	f7ff ffde 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	0adb      	lsrs	r3, r3, #11
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4903      	ldr	r1, [pc, #12]	; (800270c <HAL_RCC_GetPCLK2Freq+0x24>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40021000 	.word	0x40021000
 800270c:	080049a8 	.word	0x080049a8

08002710 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <RCC_Delay+0x34>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <RCC_Delay+0x38>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	0a5b      	lsrs	r3, r3, #9
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800272c:	bf00      	nop
  }
  while (Delay --);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1e5a      	subs	r2, r3, #1
 8002732:	60fa      	str	r2, [r7, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f9      	bne.n	800272c <RCC_Delay+0x1c>
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	20000000 	.word	0x20000000
 8002748:	10624dd3 	.word	0x10624dd3

0800274c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d07d      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002768:	2300      	movs	r3, #0
 800276a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276c:	4b4f      	ldr	r3, [pc, #316]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10d      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002778:	4b4c      	ldr	r3, [pc, #304]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	4a4b      	ldr	r2, [pc, #300]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002782:	61d3      	str	r3, [r2, #28]
 8002784:	4b49      	ldr	r3, [pc, #292]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002790:	2301      	movs	r3, #1
 8002792:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002794:	4b46      	ldr	r3, [pc, #280]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d118      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a0:	4b43      	ldr	r3, [pc, #268]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a42      	ldr	r2, [pc, #264]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ac:	f7fe fbf2 	bl	8000f94 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	e008      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b4:	f7fe fbee 	bl	8000f94 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e06d      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c6:	4b3a      	ldr	r3, [pc, #232]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027d2:	4b36      	ldr	r3, [pc, #216]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d02e      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d027      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027f0:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027fa:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002800:	4b2c      	ldr	r3, [pc, #176]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002806:	4a29      	ldr	r2, [pc, #164]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d014      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7fe fbbd 	bl	8000f94 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281c:	e00a      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7fe fbb9 	bl	8000f94 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	; 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e036      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002834:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0ee      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4917      	ldr	r1, [pc, #92]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284e:	4313      	orrs	r3, r2
 8002850:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002852:	7dfb      	ldrb	r3, [r7, #23]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d105      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	4a13      	ldr	r2, [pc, #76]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002862:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	490b      	ldr	r1, [pc, #44]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287e:	4313      	orrs	r3, r2
 8002880:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b00      	cmp	r3, #0
 800288c:	d008      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	4904      	ldr	r1, [pc, #16]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289c:	4313      	orrs	r3, r2
 800289e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40007000 	.word	0x40007000
 80028b4:	42420440 	.word	0x42420440

080028b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b08d      	sub	sp, #52	; 0x34
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028c0:	4b5a      	ldr	r3, [pc, #360]	; (8002a2c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80028c2:	f107 040c 	add.w	r4, r7, #12
 80028c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028cc:	f240 2301 	movw	r3, #513	; 0x201
 80028d0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
 80028d6:	2300      	movs	r3, #0
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028da:	2300      	movs	r3, #0
 80028dc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	2300      	movs	r3, #0
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b10      	cmp	r3, #16
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b10      	cmp	r3, #16
 80028f0:	f200 8091 	bhi.w	8002a16 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d04c      	beq.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d07c      	beq.n	80029fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002900:	e089      	b.n	8002a16 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8002902:	4b4b      	ldr	r3, [pc, #300]	; (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002908:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8082 	beq.w	8002a1a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	0c9b      	lsrs	r3, r3, #18
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002922:	4413      	add	r3, r2
 8002924:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002928:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d018      	beq.n	8002966 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002934:	4b3e      	ldr	r3, [pc, #248]	; (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	0c5b      	lsrs	r3, r3, #17
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002942:	4413      	add	r3, r2
 8002944:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00d      	beq.n	8002970 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002954:	4a37      	ldr	r2, [pc, #220]	; (8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	fbb2 f2f3 	udiv	r2, r2, r3
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	fb02 f303 	mul.w	r3, r2, r3
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002964:	e004      	b.n	8002970 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	4a33      	ldr	r2, [pc, #204]	; (8002a38 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002970:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800297c:	d102      	bne.n	8002984 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002982:	e04a      	b.n	8002a1a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4a2c      	ldr	r2, [pc, #176]	; (8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	085b      	lsrs	r3, r3, #1
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002992:	e042      	b.n	8002a1a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002994:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a4:	d108      	bne.n	80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80029b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b6:	e01f      	b.n	80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c2:	d109      	bne.n	80029d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80029c4:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80029d0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d6:	e00f      	b.n	80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029e2:	d11c      	bne.n	8002a1e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d016      	beq.n	8002a1e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80029f0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80029f4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029f6:	e012      	b.n	8002a1e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80029f8:	e011      	b.n	8002a1e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80029fa:	f7ff fe75 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 80029fe:	4602      	mov	r2, r0
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	0b9b      	lsrs	r3, r3, #14
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a14:	e004      	b.n	8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002a16:	bf00      	nop
 8002a18:	e002      	b.n	8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e000      	b.n	8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002a1e:	bf00      	nop
    }
  }
  return (frequency);
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3734      	adds	r7, #52	; 0x34
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd90      	pop	{r4, r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	08004988 	.word	0x08004988
 8002a30:	40021000 	.word	0x40021000
 8002a34:	007a1200 	.word	0x007a1200
 8002a38:	003d0900 	.word	0x003d0900
 8002a3c:	aaaaaaab 	.word	0xaaaaaaab

08002a40 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e084      	b.n	8002b60 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	7c5b      	ldrb	r3, [r3, #17]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7fe f852 	bl	8000b10 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f87a 	bl	8002b6c <HAL_RTC_WaitForSynchro>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d004      	beq.n	8002a88 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2204      	movs	r2, #4
 8002a82:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e06b      	b.n	8002b60 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f89c 	bl	8002bc6 <RTC_EnterInitMode>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d004      	beq.n	8002a9e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2204      	movs	r2, #4
 8002a98:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e060      	b.n	8002b60 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0207 	bic.w	r2, r2, #7
 8002aac:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002ab6:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <HAL_RTC_Init+0x128>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a2b      	ldr	r2, [pc, #172]	; (8002b68 <HAL_RTC_Init+0x128>)
 8002abc:	f023 0301 	bic.w	r3, r3, #1
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002ac2:	4b29      	ldr	r3, [pc, #164]	; (8002b68 <HAL_RTC_Init+0x128>)
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	4926      	ldr	r1, [pc, #152]	; (8002b68 <HAL_RTC_Init+0x128>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d003      	beq.n	8002ae6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e00e      	b.n	8002b04 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f7ff fee6 	bl	80028b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002aec:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d104      	bne.n	8002afe <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2204      	movs	r2, #4
 8002af8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e030      	b.n	8002b60 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f023 010f 	bic.w	r1, r3, #15
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	0c1a      	lsrs	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	041b      	lsls	r3, r3, #16
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	b291      	uxth	r1, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f870 	bl	8002c16 <RTC_ExitInitMode>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d004      	beq.n	8002b46 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2204      	movs	r2, #4
 8002b40:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e00c      	b.n	8002b60 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
  }
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40006c00 	.word	0x40006c00

08002b6c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e01d      	b.n	8002bbe <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0208 	bic.w	r2, r2, #8
 8002b90:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002b92:	f7fe f9ff 	bl	8000f94 <HAL_GetTick>
 8002b96:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002b98:	e009      	b.n	8002bae <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b9a:	f7fe f9fb 	bl	8000f94 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ba8:	d901      	bls.n	8002bae <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e007      	b.n	8002bbe <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0ee      	beq.n	8002b9a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002bd2:	f7fe f9df 	bl	8000f94 <HAL_GetTick>
 8002bd6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002bd8:	e009      	b.n	8002bee <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002bda:	f7fe f9db 	bl	8000f94 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002be8:	d901      	bls.n	8002bee <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e00f      	b.n	8002c0e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ee      	beq.n	8002bda <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0210 	orr.w	r2, r2, #16
 8002c0a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0210 	bic.w	r2, r2, #16
 8002c30:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002c32:	f7fe f9af 	bl	8000f94 <HAL_GetTick>
 8002c36:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002c38:	e009      	b.n	8002c4e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002c3a:	f7fe f9ab 	bl	8000f94 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c48:	d901      	bls.n	8002c4e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e007      	b.n	8002c5e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ee      	beq.n	8002c3a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e076      	b.n	8002d66 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d108      	bne.n	8002c92 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c88:	d009      	beq.n	8002c9e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	61da      	str	r2, [r3, #28]
 8002c90:	e005      	b.n	8002c9e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d106      	bne.n	8002cbe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7fd ff4d 	bl	8000b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cd4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d22:	ea42 0103 	orr.w	r1, r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	0c1a      	lsrs	r2, r3, #16
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f002 0204 	and.w	r2, r2, #4
 8002d44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e03f      	b.n	8002e00 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7fd ff2b 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2224      	movs	r2, #36	; 0x24
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002db0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fd26 	bl	8003804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dd6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002de6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08a      	sub	sp, #40	; 0x28
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	4613      	mov	r3, r2
 8002e16:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d17c      	bne.n	8002f22 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_UART_Transmit+0x2c>
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e075      	b.n	8002f24 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_UART_Transmit+0x3e>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e06e      	b.n	8002f24 <HAL_UART_Transmit+0x11c>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2221      	movs	r2, #33	; 0x21
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e5c:	f7fe f89a 	bl	8000f94 <HAL_GetTick>
 8002e60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	88fa      	ldrh	r2, [r7, #6]
 8002e66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e76:	d108      	bne.n	8002e8a <HAL_UART_Transmit+0x82>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d104      	bne.n	8002e8a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	e003      	b.n	8002e92 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e9a:	e02a      	b.n	8002ef2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2180      	movs	r1, #128	; 0x80
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fad9 	bl	800345e <UART_WaitOnFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e036      	b.n	8002f24 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10b      	bne.n	8002ed4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eca:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	3302      	adds	r3, #2
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	e007      	b.n	8002ee4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1cf      	bne.n	8002e9c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2200      	movs	r2, #0
 8002f04:	2140      	movs	r1, #64	; 0x40
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 faa9 	bl	800345e <UART_WaitOnFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e006      	b.n	8002f24 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e000      	b.n	8002f24 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f22:	2302      	movs	r3, #2
  }
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3720      	adds	r7, #32
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	f040 808c 	bne.w	8003066 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <HAL_UART_Receive+0x2e>
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e084      	b.n	8003068 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_UART_Receive+0x40>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e07d      	b.n	8003068 <HAL_UART_Receive+0x13c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2222      	movs	r2, #34	; 0x22
 8002f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f88:	f7fe f804 	bl	8000f94 <HAL_GetTick>
 8002f8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	88fa      	ldrh	r2, [r7, #6]
 8002f92:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	88fa      	ldrh	r2, [r7, #6]
 8002f98:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa2:	d108      	bne.n	8002fb6 <HAL_UART_Receive+0x8a>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	e003      	b.n	8002fbe <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002fc6:	e043      	b.n	8003050 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2120      	movs	r1, #32
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 fa43 	bl	800345e <UART_WaitOnFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e042      	b.n	8003068 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10c      	bne.n	8003002 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	e01f      	b.n	8003042 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300a:	d007      	beq.n	800301c <HAL_UART_Receive+0xf0>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10a      	bne.n	800302a <HAL_UART_Receive+0xfe>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d106      	bne.n	800302a <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	e008      	b.n	800303c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003036:	b2da      	uxtb	r2, r3
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	3301      	adds	r3, #1
 8003040:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1b6      	bne.n	8002fc8 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	e000      	b.n	8003068 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003066:	2302      	movs	r3, #2
  }
}
 8003068:	4618      	mov	r0, r3
 800306a:	3720      	adds	r7, #32
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	4613      	mov	r3, r2
 800307c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b20      	cmp	r3, #32
 8003088:	d11d      	bne.n	80030c6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HAL_UART_Receive_IT+0x26>
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e016      	b.n	80030c8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_UART_Receive_IT+0x38>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e00f      	b.n	80030c8 <HAL_UART_Receive_IT+0x58>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	461a      	mov	r2, r3
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fa18 	bl	80034f2 <UART_Start_Receive_IT>
 80030c2:	4603      	mov	r3, r0
 80030c4:	e000      	b.n	80030c8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80030c6:	2302      	movs	r3, #2
  }
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	; 0x28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10d      	bne.n	8003122 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_UART_IRQHandler+0x52>
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fac9 	bl	80036b2 <UART_Receive_IT>
      return;
 8003120:	e17b      	b.n	800341a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80b1 	beq.w	800328c <HAL_UART_IRQHandler+0x1bc>
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <HAL_UART_IRQHandler+0x70>
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80a6 	beq.w	800328c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_UART_IRQHandler+0x90>
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f043 0201 	orr.w	r2, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_UART_IRQHandler+0xb0>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	f043 0202 	orr.w	r2, r3, #2
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_UART_IRQHandler+0xd0>
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f043 0204 	orr.w	r2, r3, #4
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00f      	beq.n	80031ca <HAL_UART_IRQHandler+0xfa>
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <HAL_UART_IRQHandler+0xee>
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f043 0208 	orr.w	r2, r3, #8
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 811e 	beq.w	8003410 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d007      	beq.n	80031ee <HAL_UART_IRQHandler+0x11e>
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fa62 	bl	80036b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d102      	bne.n	8003216 <HAL_UART_IRQHandler+0x146>
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d031      	beq.n	800327a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f9a4 	bl	8003564 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d023      	beq.n	8003272 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003238:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	2b00      	cmp	r3, #0
 8003240:	d013      	beq.n	800326a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	4a76      	ldr	r2, [pc, #472]	; (8003420 <HAL_UART_IRQHandler+0x350>)
 8003248:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe fb22 	bl	8001898 <HAL_DMA_Abort_IT>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d016      	beq.n	8003288 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003264:	4610      	mov	r0, r2
 8003266:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003268:	e00e      	b.n	8003288 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f8e3 	bl	8003436 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003270:	e00a      	b.n	8003288 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8df 	bl	8003436 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003278:	e006      	b.n	8003288 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f8db 	bl	8003436 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003286:	e0c3      	b.n	8003410 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003288:	bf00      	nop
    return;
 800328a:	e0c1      	b.n	8003410 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	2b01      	cmp	r3, #1
 8003292:	f040 80a1 	bne.w	80033d8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 809b 	beq.w	80033d8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 8095 	beq.w	80033d8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d04e      	beq.n	8003370 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80032dc:	8a3b      	ldrh	r3, [r7, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8098 	beq.w	8003414 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032e8:	8a3a      	ldrh	r2, [r7, #16]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	f080 8092 	bcs.w	8003414 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	8a3a      	ldrh	r2, [r7, #16]
 80032f4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d02b      	beq.n	8003358 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800330e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800332e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0210 	bic.w	r2, r2, #16
 800334c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fa65 	bl	8001822 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003360:	b29b      	uxth	r3, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	b29b      	uxth	r3, r3
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f86d 	bl	8003448 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800336e:	e051      	b.n	8003414 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003378:	b29b      	uxth	r3, r3
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d047      	beq.n	8003418 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003388:	8a7b      	ldrh	r3, [r7, #18]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d044      	beq.n	8003418 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800339c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0210 	bic.w	r2, r2, #16
 80033ca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033cc:	8a7b      	ldrh	r3, [r7, #18]
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f839 	bl	8003448 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033d6:	e01f      	b.n	8003418 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_UART_IRQHandler+0x324>
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8f9 	bl	80035e4 <UART_Transmit_IT>
    return;
 80033f2:	e012      	b.n	800341a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00d      	beq.n	800341a <HAL_UART_IRQHandler+0x34a>
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f93a 	bl	8003682 <UART_EndTransmit_IT>
    return;
 800340e:	e004      	b.n	800341a <HAL_UART_IRQHandler+0x34a>
    return;
 8003410:	bf00      	nop
 8003412:	e002      	b.n	800341a <HAL_UART_IRQHandler+0x34a>
      return;
 8003414:	bf00      	nop
 8003416:	e000      	b.n	800341a <HAL_UART_IRQHandler+0x34a>
      return;
 8003418:	bf00      	nop
  }
}
 800341a:	3728      	adds	r7, #40	; 0x28
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	080035bd 	.word	0x080035bd

08003424 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr

0800345e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346e:	e02c      	b.n	80034ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003476:	d028      	beq.n	80034ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <UART_WaitOnFlagUntilTimeout+0x30>
 800347e:	f7fd fd89 	bl	8000f94 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	429a      	cmp	r2, r3
 800348c:	d21d      	bcs.n	80034ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800349c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e00f      	b.n	80034ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4013      	ands	r3, r2
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	bf0c      	ite	eq
 80034da:	2301      	moveq	r3, #1
 80034dc:	2300      	movne	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d0c3      	beq.n	8003470 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	4613      	mov	r3, r2
 80034fe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	88fa      	ldrh	r2, [r7, #6]
 8003510:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2222      	movs	r2, #34	; 0x22
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003536:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0220 	orr.w	r2, r2, #32
 8003556:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800357a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0201 	bic.w	r2, r2, #1
 800358a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	2b01      	cmp	r3, #1
 8003592:	d107      	bne.n	80035a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0210 	bic.w	r2, r2, #16
 80035a2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7ff ff2d 	bl	8003436 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b21      	cmp	r3, #33	; 0x21
 80035f6:	d13e      	bne.n	8003676 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003600:	d114      	bne.n	800362c <UART_Transmit_IT+0x48>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d110      	bne.n	800362c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800361e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	1c9a      	adds	r2, r3, #2
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	621a      	str	r2, [r3, #32]
 800362a:	e008      	b.n	800363e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	1c59      	adds	r1, r3, #1
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6211      	str	r1, [r2, #32]
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29b      	uxth	r3, r3
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	4619      	mov	r1, r3
 800364c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10f      	bne.n	8003672 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003660:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003670:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
  }
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr

08003682 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003698:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff febe 	bl	8003424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b086      	sub	sp, #24
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b22      	cmp	r3, #34	; 0x22
 80036c4:	f040 8099 	bne.w	80037fa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d0:	d117      	bne.n	8003702 <UART_Receive_IT+0x50>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d113      	bne.n	8003702 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fa:	1c9a      	adds	r2, r3, #2
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003700:	e026      	b.n	8003750 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003708:	2300      	movs	r3, #0
 800370a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003714:	d007      	beq.n	8003726 <UART_Receive_IT+0x74>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <UART_Receive_IT+0x82>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e008      	b.n	8003746 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003740:	b2da      	uxtb	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003754:	b29b      	uxth	r3, r3
 8003756:	3b01      	subs	r3, #1
 8003758:	b29b      	uxth	r3, r3
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	4619      	mov	r1, r3
 800375e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003760:	2b00      	cmp	r3, #0
 8003762:	d148      	bne.n	80037f6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0220 	bic.w	r2, r2, #32
 8003772:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003782:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d123      	bne.n	80037ec <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0210 	bic.w	r2, r2, #16
 80037b8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d10a      	bne.n	80037de <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fe2f 	bl	8003448 <HAL_UARTEx_RxEventCallback>
 80037ea:	e002      	b.n	80037f2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f9fb 	bl	8003be8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e002      	b.n	80037fc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e000      	b.n	80037fc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80037fa:	2302      	movs	r3, #2
  }
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800383e:	f023 030c 	bic.w	r3, r3, #12
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	430b      	orrs	r3, r1
 800384a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699a      	ldr	r2, [r3, #24]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a2c      	ldr	r2, [pc, #176]	; (8003918 <UART_SetConfig+0x114>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d103      	bne.n	8003874 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800386c:	f7fe ff3c 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	e002      	b.n	800387a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003874:	f7fe ff24 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 8003878:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	009a      	lsls	r2, r3, #2
 8003884:	441a      	add	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	4a22      	ldr	r2, [pc, #136]	; (800391c <UART_SetConfig+0x118>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	0119      	lsls	r1, r3, #4
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009a      	lsls	r2, r3, #2
 80038a4:	441a      	add	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80038b0:	4b1a      	ldr	r3, [pc, #104]	; (800391c <UART_SetConfig+0x118>)
 80038b2:	fba3 0302 	umull	r0, r3, r3, r2
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	2064      	movs	r0, #100	; 0x64
 80038ba:	fb00 f303 	mul.w	r3, r0, r3
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	3332      	adds	r3, #50	; 0x32
 80038c4:	4a15      	ldr	r2, [pc, #84]	; (800391c <UART_SetConfig+0x118>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038d0:	4419      	add	r1, r3
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	009a      	lsls	r2, r3, #2
 80038dc:	441a      	add	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <UART_SetConfig+0x118>)
 80038ea:	fba3 0302 	umull	r0, r3, r3, r2
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	2064      	movs	r0, #100	; 0x64
 80038f2:	fb00 f303 	mul.w	r3, r0, r3
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	3332      	adds	r3, #50	; 0x32
 80038fc:	4a07      	ldr	r2, [pc, #28]	; (800391c <UART_SetConfig+0x118>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	f003 020f 	and.w	r2, r3, #15
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	440a      	add	r2, r1
 800390e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40013800 	.word	0x40013800
 800391c:	51eb851f 	.word	0x51eb851f

08003920 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003920:	b084      	sub	sp, #16
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	f107 0014 	add.w	r0, r7, #20
 800392e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	b004      	add	sp, #16
 800393e:	4770      	bx	lr

08003940 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003948:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800394c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	b29b      	uxth	r3, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	b29b      	uxth	r3, r3
 800395e:	4013      	ands	r3, r2
 8003960:	b29a      	uxth	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr

08003974 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800398c:	b084      	sub	sp, #16
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	f107 0014 	add.w	r0, r7, #20
 800399a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	b004      	add	sp, #16
 80039ca:	4770      	bx	lr

080039cc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr

080039e0 <BUZZER_SOLO1>:
 */

#include "buzzer.h"
#define time1 50 //单音的时长
#define hz1 1 //单音的音调（单位毫秒）
void BUZZER_SOLO1(void){//蜂鸣器输出单音的报警音（样式1：HAL库的精准延时函数）
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
    uint16_t i;
    for(i=0;i<time1;i++){//循环次数决定单音的时长
 80039e6:	2300      	movs	r3, #0
 80039e8:	80fb      	strh	r3, [r7, #6]
 80039ea:	e012      	b.n	8003a12 <BUZZER_SOLO1+0x32>
       HAL_GPIO_WritePin(BEEP1_GPIO_Port,BEEP1_Pin,GPIO_PIN_RESET); //蜂鸣器接口输出低电平0
 80039ec:	2200      	movs	r2, #0
 80039ee:	2120      	movs	r1, #32
 80039f0:	480c      	ldr	r0, [pc, #48]	; (8003a24 <BUZZER_SOLO1+0x44>)
 80039f2:	f7fe f962 	bl	8001cba <HAL_GPIO_WritePin>
       HAL_Delay(hz1); //延时（毫秒级延时最小1微秒，实现的单调较低，因不需要额外编写微秒级延时函数所以最简单实用）
 80039f6:	2001      	movs	r0, #1
 80039f8:	f7fd fad6 	bl	8000fa8 <HAL_Delay>
       HAL_GPIO_WritePin(BEEP1_GPIO_Port,BEEP1_Pin,GPIO_PIN_SET); //蜂鸣器接口输出高电平1
 80039fc:	2201      	movs	r2, #1
 80039fe:	2120      	movs	r1, #32
 8003a00:	4808      	ldr	r0, [pc, #32]	; (8003a24 <BUZZER_SOLO1+0x44>)
 8003a02:	f7fe f95a 	bl	8001cba <HAL_GPIO_WritePin>
       HAL_Delay(hz1); //延时
 8003a06:	2001      	movs	r0, #1
 8003a08:	f7fd face 	bl	8000fa8 <HAL_Delay>
    for(i=0;i<time1;i++){//循环次数决定单音的时长
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	80fb      	strh	r3, [r7, #6]
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	2b31      	cmp	r3, #49	; 0x31
 8003a16:	d9e9      	bls.n	80039ec <BUZZER_SOLO1+0xc>
    }
}
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40010c00 	.word	0x40010c00

08003a28 <BUZZER_SOLO2>:
#define time2 200 //单音的时长
#define hz2 500 //单音的音调（单位微秒）
void BUZZER_SOLO2(void){//蜂鸣器输出单音的报警音（样式2：CPU微秒级延时）
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
    uint16_t i;
    for(i=0;i<time2;i++){//循环次数决定单音的时长
 8003a2e:	2300      	movs	r3, #0
 8003a30:	80fb      	strh	r3, [r7, #6]
 8003a32:	e014      	b.n	8003a5e <BUZZER_SOLO2+0x36>
       HAL_GPIO_WritePin(BEEP1_GPIO_Port,BEEP1_Pin,GPIO_PIN_RESET); //蜂鸣器接口输出低电平0
 8003a34:	2200      	movs	r2, #0
 8003a36:	2120      	movs	r1, #32
 8003a38:	480d      	ldr	r0, [pc, #52]	; (8003a70 <BUZZER_SOLO2+0x48>)
 8003a3a:	f7fe f93e 	bl	8001cba <HAL_GPIO_WritePin>
       delay_us(hz2); //延时
 8003a3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a42:	f000 f817 	bl	8003a74 <delay_us>
       HAL_GPIO_WritePin(BEEP1_GPIO_Port,BEEP1_Pin,GPIO_PIN_SET); //蜂鸣器接口输出高电平1
 8003a46:	2201      	movs	r2, #1
 8003a48:	2120      	movs	r1, #32
 8003a4a:	4809      	ldr	r0, [pc, #36]	; (8003a70 <BUZZER_SOLO2+0x48>)
 8003a4c:	f7fe f935 	bl	8001cba <HAL_GPIO_WritePin>
       delay_us(hz2); //延时
 8003a50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a54:	f000 f80e 	bl	8003a74 <delay_us>
    for(i=0;i<time2;i++){//循环次数决定单音的时长
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	80fb      	strh	r3, [r7, #6]
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	2bc7      	cmp	r3, #199	; 0xc7
 8003a62:	d9e7      	bls.n	8003a34 <BUZZER_SOLO2+0xc>
    }
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40010c00 	.word	0x40010c00

08003a74 <delay_us>:
 */

#include "delay.h"

void delay_us(uint32_t us) //利用CPU循环实现的非精准应用的微秒延时函数
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
    uint32_t delay = (HAL_RCC_GetHCLKFreq() / 8000000 * us); //使用HAL_RCC_GetHCLKFreq()函数获取主频值，经算法得到1微秒的循环次数
 8003a7c:	f7fe fe16 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 8003a80:	4603      	mov	r3, r0
 8003a82:	4a09      	ldr	r2, [pc, #36]	; (8003aa8 <delay_us+0x34>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	0d5a      	lsrs	r2, r3, #21
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	fb02 f303 	mul.w	r3, r2, r3
 8003a90:	60fb      	str	r3, [r7, #12]
    while (delay--); //循环delay次，达到1微秒延时
 8003a92:	bf00      	nop
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1e5a      	subs	r2, r3, #1
 8003a98:	60fa      	str	r2, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1fa      	bne.n	8003a94 <delay_us+0x20>
}
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	431bde83 	.word	0x431bde83

08003aac <KEY_1>:
 */

#include "key.h"

uint8_t KEY_1(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
	uint8_t a;
	a=0;//如果未进入按键处理，则返回0
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(GPIOA,KEY1_Pin)==GPIO_PIN_RESET){//读按键接口的电平
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	480f      	ldr	r0, [pc, #60]	; (8003af8 <KEY_1+0x4c>)
 8003aba:	f7fe f8e7 	bl	8001c8c <HAL_GPIO_ReadPin>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10b      	bne.n	8003adc <KEY_1+0x30>
		HAL_Delay(20);//延时去抖动
 8003ac4:	2014      	movs	r0, #20
 8003ac6:	f7fd fa6f 	bl	8000fa8 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA,KEY1_Pin)==GPIO_PIN_RESET){ //读按键接口的电平
 8003aca:	2101      	movs	r1, #1
 8003acc:	480a      	ldr	r0, [pc, #40]	; (8003af8 <KEY_1+0x4c>)
 8003ace:	f7fe f8dd 	bl	8001c8c <HAL_GPIO_ReadPin>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <KEY_1+0x30>
			a=1;//进入按键处理，返回1
 8003ad8:	2301      	movs	r3, #1
 8003ada:	71fb      	strb	r3, [r7, #7]
		}
	}
	while(HAL_GPIO_ReadPin(GPIOA,KEY1_Pin)==GPIO_PIN_RESET); //等待按键松开
 8003adc:	bf00      	nop
 8003ade:	2101      	movs	r1, #1
 8003ae0:	4805      	ldr	r0, [pc, #20]	; (8003af8 <KEY_1+0x4c>)
 8003ae2:	f7fe f8d3 	bl	8001c8c <HAL_GPIO_ReadPin>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f8      	beq.n	8003ade <KEY_1+0x32>
	return a;
 8003aec:	79fb      	ldrb	r3, [r7, #7]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40010800 	.word	0x40010800

08003afc <KEY_2>:

uint8_t KEY_2(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
	uint8_t a;
	a=0;//如果未进入按键处理，则返回0
 8003b02:	2300      	movs	r3, #0
 8003b04:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(GPIOA,KEY2_Pin)==GPIO_PIN_RESET){//读按键接口的电平
 8003b06:	2102      	movs	r1, #2
 8003b08:	480f      	ldr	r0, [pc, #60]	; (8003b48 <KEY_2+0x4c>)
 8003b0a:	f7fe f8bf 	bl	8001c8c <HAL_GPIO_ReadPin>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10b      	bne.n	8003b2c <KEY_2+0x30>
		HAL_Delay(20);//延时去抖动
 8003b14:	2014      	movs	r0, #20
 8003b16:	f7fd fa47 	bl	8000fa8 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOA,KEY2_Pin)==GPIO_PIN_RESET){ //读按键接口的电平
 8003b1a:	2102      	movs	r1, #2
 8003b1c:	480a      	ldr	r0, [pc, #40]	; (8003b48 <KEY_2+0x4c>)
 8003b1e:	f7fe f8b5 	bl	8001c8c <HAL_GPIO_ReadPin>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <KEY_2+0x30>
			a=1;//进入按键处理，返回1
 8003b28:	2301      	movs	r3, #1
 8003b2a:	71fb      	strb	r3, [r7, #7]
		}
	}
	while(HAL_GPIO_ReadPin(GPIOA,KEY2_Pin)==GPIO_PIN_RESET); //等待按键松开
 8003b2c:	bf00      	nop
 8003b2e:	2102      	movs	r1, #2
 8003b30:	4805      	ldr	r0, [pc, #20]	; (8003b48 <KEY_2+0x4c>)
 8003b32:	f7fe f8ab 	bl	8001c8c <HAL_GPIO_ReadPin>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f8      	beq.n	8003b2e <KEY_2+0x32>
	return a;
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40010800 	.word	0x40010800

08003b4c <LED_1>:
 */

#include "led.h"

void LED_1(uint8_t a)//LED1独立控制函数（0为熄灭，其他值为点亮）
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	71fb      	strb	r3, [r7, #7]
	if(a)HAL_GPIO_WritePin(GPIOB,LED1_Pin,GPIO_PIN_SET);
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <LED_1+0x1c>
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	2101      	movs	r1, #1
 8003b60:	4806      	ldr	r0, [pc, #24]	; (8003b7c <LED_1+0x30>)
 8003b62:	f7fe f8aa 	bl	8001cba <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOB,LED1_Pin,GPIO_PIN_RESET);
}
 8003b66:	e004      	b.n	8003b72 <LED_1+0x26>
	else HAL_GPIO_WritePin(GPIOB,LED1_Pin,GPIO_PIN_RESET);
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	4803      	ldr	r0, [pc, #12]	; (8003b7c <LED_1+0x30>)
 8003b6e:	f7fe f8a4 	bl	8001cba <HAL_GPIO_WritePin>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40010c00 	.word	0x40010c00

08003b80 <LED_2>:
void LED_2(uint8_t a)//LED2独立控制函数（0为熄灭，其他值为点亮）
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
	if(a)HAL_GPIO_WritePin(GPIOB,LED2_Pin,GPIO_PIN_SET);
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <LED_2+0x1c>
 8003b90:	2201      	movs	r2, #1
 8003b92:	2102      	movs	r1, #2
 8003b94:	4806      	ldr	r0, [pc, #24]	; (8003bb0 <LED_2+0x30>)
 8003b96:	f7fe f890 	bl	8001cba <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOB,LED2_Pin,GPIO_PIN_RESET);
}
 8003b9a:	e004      	b.n	8003ba6 <LED_2+0x26>
	else HAL_GPIO_WritePin(GPIOB,LED2_Pin,GPIO_PIN_RESET);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	4803      	ldr	r0, [pc, #12]	; (8003bb0 <LED_2+0x30>)
 8003ba2:	f7fe f88a 	bl	8001cba <HAL_GPIO_WritePin>
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40010c00 	.word	0x40010c00

08003bb4 <RELAY_1>:
 *      Author: Administrator
 */

#include "relay.h"

void RELAY_1(uint8_t c){ //继电器的控制程序（c=0继电器放开，c=1继电器吸合）
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	71fb      	strb	r3, [r7, #7]
    if(c)HAL_GPIO_WritePin(GPIOA,RELAY1_Pin,GPIO_PIN_RESET); //继电器吸
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <RELAY_1+0x1c>
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2140      	movs	r1, #64	; 0x40
 8003bc8:	4806      	ldr	r0, [pc, #24]	; (8003be4 <RELAY_1+0x30>)
 8003bca:	f7fe f876 	bl	8001cba <HAL_GPIO_WritePin>
    else  HAL_GPIO_WritePin(GPIOA,RELAY1_Pin,GPIO_PIN_SET); //继电器松
}
 8003bce:	e004      	b.n	8003bda <RELAY_1+0x26>
    else  HAL_GPIO_WritePin(GPIOA,RELAY1_Pin,GPIO_PIN_SET); //继电器松
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	2140      	movs	r1, #64	; 0x40
 8003bd4:	4803      	ldr	r0, [pc, #12]	; (8003be4 <RELAY_1+0x30>)
 8003bd6:	f7fe f870 	bl	8001cba <HAL_GPIO_WritePin>
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40010800 	.word	0x40010800

08003be8 <HAL_UART_RxCpltCallback>:
uint8_t USART3_RX_BUF[USART3_REC_LEN];//接收缓冲,最大USART_REC_LEN个字节.
uint16_t USART3_RX_STA=0;//接收状态标记//bit15：接收完成标志，bit14：接收到0x0d，bit13~0：接收到的有效字节数目
uint8_t USART3_NewData;//当前串口中断接收的1个字节数据的缓存

void  HAL_UART_RxCpltCallback(UART_HandleTypeDef  *huart)//串口中断回调函数
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	if(huart ==&huart1)//判断中断来源（串口1：USB转串口）
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a3d      	ldr	r2, [pc, #244]	; (8003ce8 <HAL_UART_RxCpltCallback+0x100>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d147      	bne.n	8003c88 <HAL_UART_RxCpltCallback+0xa0>
    {
       printf("%c",USART1_NewData); //把收到的数据以 a符号变量 发送回电脑
 8003bf8:	4b3c      	ldr	r3, [pc, #240]	; (8003cec <HAL_UART_RxCpltCallback+0x104>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 f8bb 	bl	8003d78 <putchar>
       if((USART1_RX_STA&0x8000)==0){//接收未完成
 8003c02:	4b3b      	ldr	r3, [pc, #236]	; (8003cf0 <HAL_UART_RxCpltCallback+0x108>)
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	b21b      	sxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	db38      	blt.n	8003c7e <HAL_UART_RxCpltCallback+0x96>
           if(USART1_RX_STA&0x4000){//接收到了0x0d
 8003c0c:	4b38      	ldr	r3, [pc, #224]	; (8003cf0 <HAL_UART_RxCpltCallback+0x108>)
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d011      	beq.n	8003c3c <HAL_UART_RxCpltCallback+0x54>
               if(USART1_NewData!=0x0a)USART1_RX_STA=0;//接收错误,重新开始
 8003c18:	4b34      	ldr	r3, [pc, #208]	; (8003cec <HAL_UART_RxCpltCallback+0x104>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b0a      	cmp	r3, #10
 8003c1e:	d003      	beq.n	8003c28 <HAL_UART_RxCpltCallback+0x40>
 8003c20:	4b33      	ldr	r3, [pc, #204]	; (8003cf0 <HAL_UART_RxCpltCallback+0x108>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	801a      	strh	r2, [r3, #0]
 8003c26:	e02a      	b.n	8003c7e <HAL_UART_RxCpltCallback+0x96>
               else USART1_RX_STA|=0x8000;   //接收完成了
 8003c28:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <HAL_UART_RxCpltCallback+0x108>)
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	4b2e      	ldr	r3, [pc, #184]	; (8003cf0 <HAL_UART_RxCpltCallback+0x108>)
 8003c38:	801a      	strh	r2, [r3, #0]
 8003c3a:	e020      	b.n	8003c7e <HAL_UART_RxCpltCallback+0x96>
           }else{ //还没收到0X0D
               if(USART1_NewData==0x0d)USART1_RX_STA|=0x4000;
 8003c3c:	4b2b      	ldr	r3, [pc, #172]	; (8003cec <HAL_UART_RxCpltCallback+0x104>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b0d      	cmp	r3, #13
 8003c42:	d107      	bne.n	8003c54 <HAL_UART_RxCpltCallback+0x6c>
 8003c44:	4b2a      	ldr	r3, [pc, #168]	; (8003cf0 <HAL_UART_RxCpltCallback+0x108>)
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	4b28      	ldr	r3, [pc, #160]	; (8003cf0 <HAL_UART_RxCpltCallback+0x108>)
 8003c50:	801a      	strh	r2, [r3, #0]
 8003c52:	e014      	b.n	8003c7e <HAL_UART_RxCpltCallback+0x96>
               else{
                  USART1_RX_BUF[USART1_RX_STA&0X3FFF]=USART1_NewData; //将收到的数据放入数组
 8003c54:	4b26      	ldr	r3, [pc, #152]	; (8003cf0 <HAL_UART_RxCpltCallback+0x108>)
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003c5c:	4a23      	ldr	r2, [pc, #140]	; (8003cec <HAL_UART_RxCpltCallback+0x104>)
 8003c5e:	7811      	ldrb	r1, [r2, #0]
 8003c60:	4a24      	ldr	r2, [pc, #144]	; (8003cf4 <HAL_UART_RxCpltCallback+0x10c>)
 8003c62:	54d1      	strb	r1, [r2, r3]
                  USART1_RX_STA++;  //数据长度计数加1
 8003c64:	4b22      	ldr	r3, [pc, #136]	; (8003cf0 <HAL_UART_RxCpltCallback+0x108>)
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <HAL_UART_RxCpltCallback+0x108>)
 8003c6e:	801a      	strh	r2, [r3, #0]
                  if(USART1_RX_STA>(USART1_REC_LEN-1))USART1_RX_STA=0;//接收数据错误,重新开始接收
 8003c70:	4b1f      	ldr	r3, [pc, #124]	; (8003cf0 <HAL_UART_RxCpltCallback+0x108>)
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	2bc7      	cmp	r3, #199	; 0xc7
 8003c76:	d902      	bls.n	8003c7e <HAL_UART_RxCpltCallback+0x96>
 8003c78:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <HAL_UART_RxCpltCallback+0x108>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	801a      	strh	r2, [r3, #0]
               }
           }
       }
       HAL_UART_Receive_IT(&huart1,(uint8_t *)&USART1_NewData,1); //再开启接收中断
 8003c7e:	2201      	movs	r2, #1
 8003c80:	491a      	ldr	r1, [pc, #104]	; (8003cec <HAL_UART_RxCpltCallback+0x104>)
 8003c82:	4819      	ldr	r0, [pc, #100]	; (8003ce8 <HAL_UART_RxCpltCallback+0x100>)
 8003c84:	f7ff f9f4 	bl	8003070 <HAL_UART_Receive_IT>
    }
    if(huart ==&huart2)//判断中断来源（RS485/蓝牙模块）
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <HAL_UART_RxCpltCallback+0x110>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d118      	bne.n	8003cc2 <HAL_UART_RxCpltCallback+0xda>
    {
       if(RS485orBT){//当RS485orBT标志位为1时是RS485模式，为0时是蓝牙模式
 8003c90:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <HAL_UART_RxCpltCallback+0x114>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <HAL_UART_RxCpltCallback+0xc6>
    	   USART2_RX_BUF[0]=USART2_NewData;//将接收到的数据放入缓存数组（因只用到1个数据，所以只存放在数据[0]位置）
 8003c98:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <HAL_UART_RxCpltCallback+0x118>)
 8003c9a:	781a      	ldrb	r2, [r3, #0]
 8003c9c:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <HAL_UART_RxCpltCallback+0x11c>)
 8003c9e:	701a      	strb	r2, [r3, #0]
    	   USART2_RX_STA++;//数据接收标志位加1
 8003ca0:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <HAL_UART_RxCpltCallback+0x120>)
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <HAL_UART_RxCpltCallback+0x120>)
 8003caa:	801a      	strh	r2, [r3, #0]
 8003cac:	e004      	b.n	8003cb8 <HAL_UART_RxCpltCallback+0xd0>
       }else{
    	   printf("%c",USART2_NewData); //把收到的数据以 a符号变量 发送回电脑
 8003cae:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <HAL_UART_RxCpltCallback+0x118>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 f860 	bl	8003d78 <putchar>
       }
       HAL_UART_Receive_IT(&huart2,(uint8_t *)&USART2_NewData, 1); //再开启接收中断
 8003cb8:	2201      	movs	r2, #1
 8003cba:	4911      	ldr	r1, [pc, #68]	; (8003d00 <HAL_UART_RxCpltCallback+0x118>)
 8003cbc:	480e      	ldr	r0, [pc, #56]	; (8003cf8 <HAL_UART_RxCpltCallback+0x110>)
 8003cbe:	f7ff f9d7 	bl	8003070 <HAL_UART_Receive_IT>
    }
	if(huart ==&huart3)//判断中断来源（串口3：WIFI模块）
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a11      	ldr	r2, [pc, #68]	; (8003d0c <HAL_UART_RxCpltCallback+0x124>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d109      	bne.n	8003cde <HAL_UART_RxCpltCallback+0xf6>
	{
		printf("%c",USART3_NewData); //把收到的数据以 a符号变量 发送回电脑
 8003cca:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_UART_RxCpltCallback+0x128>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 f852 	bl	8003d78 <putchar>
		HAL_UART_Receive_IT(&huart3,(uint8_t *)&USART3_NewData,1); //再开启接收中断
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	490e      	ldr	r1, [pc, #56]	; (8003d10 <HAL_UART_RxCpltCallback+0x128>)
 8003cd8:	480c      	ldr	r0, [pc, #48]	; (8003d0c <HAL_UART_RxCpltCallback+0x124>)
 8003cda:	f7ff f9c9 	bl	8003070 <HAL_UART_Receive_IT>
	}
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200001c0 	.word	0x200001c0
 8003cec:	200006e4 	.word	0x200006e4
 8003cf0:	20000090 	.word	0x20000090
 8003cf4:	200006e8 	.word	0x200006e8
 8003cf8:	20000218 	.word	0x20000218
 8003cfc:	20000550 	.word	0x20000550
 8003d00:	20000551 	.word	0x20000551
 8003d04:	2000061c 	.word	0x2000061c
 8003d08:	20000092 	.word	0x20000092
 8003d0c:	200000f4 	.word	0x200000f4
 8003d10:	200007b0 	.word	0x200007b0

08003d14 <__errno>:
 8003d14:	4b01      	ldr	r3, [pc, #4]	; (8003d1c <__errno+0x8>)
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	2000000c 	.word	0x2000000c

08003d20 <__libc_init_array>:
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	2600      	movs	r6, #0
 8003d24:	4d0c      	ldr	r5, [pc, #48]	; (8003d58 <__libc_init_array+0x38>)
 8003d26:	4c0d      	ldr	r4, [pc, #52]	; (8003d5c <__libc_init_array+0x3c>)
 8003d28:	1b64      	subs	r4, r4, r5
 8003d2a:	10a4      	asrs	r4, r4, #2
 8003d2c:	42a6      	cmp	r6, r4
 8003d2e:	d109      	bne.n	8003d44 <__libc_init_array+0x24>
 8003d30:	f000 fe0e 	bl	8004950 <_init>
 8003d34:	2600      	movs	r6, #0
 8003d36:	4d0a      	ldr	r5, [pc, #40]	; (8003d60 <__libc_init_array+0x40>)
 8003d38:	4c0a      	ldr	r4, [pc, #40]	; (8003d64 <__libc_init_array+0x44>)
 8003d3a:	1b64      	subs	r4, r4, r5
 8003d3c:	10a4      	asrs	r4, r4, #2
 8003d3e:	42a6      	cmp	r6, r4
 8003d40:	d105      	bne.n	8003d4e <__libc_init_array+0x2e>
 8003d42:	bd70      	pop	{r4, r5, r6, pc}
 8003d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d48:	4798      	blx	r3
 8003d4a:	3601      	adds	r6, #1
 8003d4c:	e7ee      	b.n	8003d2c <__libc_init_array+0xc>
 8003d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d52:	4798      	blx	r3
 8003d54:	3601      	adds	r6, #1
 8003d56:	e7f2      	b.n	8003d3e <__libc_init_array+0x1e>
 8003d58:	08004a14 	.word	0x08004a14
 8003d5c:	08004a14 	.word	0x08004a14
 8003d60:	08004a14 	.word	0x08004a14
 8003d64:	08004a18 	.word	0x08004a18

08003d68 <memset>:
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4402      	add	r2, r0
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d100      	bne.n	8003d72 <memset+0xa>
 8003d70:	4770      	bx	lr
 8003d72:	f803 1b01 	strb.w	r1, [r3], #1
 8003d76:	e7f9      	b.n	8003d6c <memset+0x4>

08003d78 <putchar>:
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <putchar+0x24>)
 8003d7c:	4605      	mov	r5, r0
 8003d7e:	681c      	ldr	r4, [r3, #0]
 8003d80:	b124      	cbz	r4, 8003d8c <putchar+0x14>
 8003d82:	69a3      	ldr	r3, [r4, #24]
 8003d84:	b913      	cbnz	r3, 8003d8c <putchar+0x14>
 8003d86:	4620      	mov	r0, r4
 8003d88:	f000 fb20 	bl	80043cc <__sinit>
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	4620      	mov	r0, r4
 8003d90:	68a2      	ldr	r2, [r4, #8]
 8003d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d96:	f000 bccb 	b.w	8004730 <_putc_r>
 8003d9a:	bf00      	nop
 8003d9c:	2000000c 	.word	0x2000000c

08003da0 <_puts_r>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	460e      	mov	r6, r1
 8003da4:	4605      	mov	r5, r0
 8003da6:	b118      	cbz	r0, 8003db0 <_puts_r+0x10>
 8003da8:	6983      	ldr	r3, [r0, #24]
 8003daa:	b90b      	cbnz	r3, 8003db0 <_puts_r+0x10>
 8003dac:	f000 fb0e 	bl	80043cc <__sinit>
 8003db0:	69ab      	ldr	r3, [r5, #24]
 8003db2:	68ac      	ldr	r4, [r5, #8]
 8003db4:	b913      	cbnz	r3, 8003dbc <_puts_r+0x1c>
 8003db6:	4628      	mov	r0, r5
 8003db8:	f000 fb08 	bl	80043cc <__sinit>
 8003dbc:	4b2c      	ldr	r3, [pc, #176]	; (8003e70 <_puts_r+0xd0>)
 8003dbe:	429c      	cmp	r4, r3
 8003dc0:	d120      	bne.n	8003e04 <_puts_r+0x64>
 8003dc2:	686c      	ldr	r4, [r5, #4]
 8003dc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dc6:	07db      	lsls	r3, r3, #31
 8003dc8:	d405      	bmi.n	8003dd6 <_puts_r+0x36>
 8003dca:	89a3      	ldrh	r3, [r4, #12]
 8003dcc:	0598      	lsls	r0, r3, #22
 8003dce:	d402      	bmi.n	8003dd6 <_puts_r+0x36>
 8003dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dd2:	f000 fb99 	bl	8004508 <__retarget_lock_acquire_recursive>
 8003dd6:	89a3      	ldrh	r3, [r4, #12]
 8003dd8:	0719      	lsls	r1, r3, #28
 8003dda:	d51d      	bpl.n	8003e18 <_puts_r+0x78>
 8003ddc:	6923      	ldr	r3, [r4, #16]
 8003dde:	b1db      	cbz	r3, 8003e18 <_puts_r+0x78>
 8003de0:	3e01      	subs	r6, #1
 8003de2:	68a3      	ldr	r3, [r4, #8]
 8003de4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003de8:	3b01      	subs	r3, #1
 8003dea:	60a3      	str	r3, [r4, #8]
 8003dec:	bb39      	cbnz	r1, 8003e3e <_puts_r+0x9e>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	da38      	bge.n	8003e64 <_puts_r+0xc4>
 8003df2:	4622      	mov	r2, r4
 8003df4:	210a      	movs	r1, #10
 8003df6:	4628      	mov	r0, r5
 8003df8:	f000 f90e 	bl	8004018 <__swbuf_r>
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d011      	beq.n	8003e24 <_puts_r+0x84>
 8003e00:	250a      	movs	r5, #10
 8003e02:	e011      	b.n	8003e28 <_puts_r+0x88>
 8003e04:	4b1b      	ldr	r3, [pc, #108]	; (8003e74 <_puts_r+0xd4>)
 8003e06:	429c      	cmp	r4, r3
 8003e08:	d101      	bne.n	8003e0e <_puts_r+0x6e>
 8003e0a:	68ac      	ldr	r4, [r5, #8]
 8003e0c:	e7da      	b.n	8003dc4 <_puts_r+0x24>
 8003e0e:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <_puts_r+0xd8>)
 8003e10:	429c      	cmp	r4, r3
 8003e12:	bf08      	it	eq
 8003e14:	68ec      	ldreq	r4, [r5, #12]
 8003e16:	e7d5      	b.n	8003dc4 <_puts_r+0x24>
 8003e18:	4621      	mov	r1, r4
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f000 f94e 	bl	80040bc <__swsetup_r>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	d0dd      	beq.n	8003de0 <_puts_r+0x40>
 8003e24:	f04f 35ff 	mov.w	r5, #4294967295
 8003e28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e2a:	07da      	lsls	r2, r3, #31
 8003e2c:	d405      	bmi.n	8003e3a <_puts_r+0x9a>
 8003e2e:	89a3      	ldrh	r3, [r4, #12]
 8003e30:	059b      	lsls	r3, r3, #22
 8003e32:	d402      	bmi.n	8003e3a <_puts_r+0x9a>
 8003e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e36:	f000 fb68 	bl	800450a <__retarget_lock_release_recursive>
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	bd70      	pop	{r4, r5, r6, pc}
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	da04      	bge.n	8003e4c <_puts_r+0xac>
 8003e42:	69a2      	ldr	r2, [r4, #24]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	dc06      	bgt.n	8003e56 <_puts_r+0xb6>
 8003e48:	290a      	cmp	r1, #10
 8003e4a:	d004      	beq.n	8003e56 <_puts_r+0xb6>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	6022      	str	r2, [r4, #0]
 8003e52:	7019      	strb	r1, [r3, #0]
 8003e54:	e7c5      	b.n	8003de2 <_puts_r+0x42>
 8003e56:	4622      	mov	r2, r4
 8003e58:	4628      	mov	r0, r5
 8003e5a:	f000 f8dd 	bl	8004018 <__swbuf_r>
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d1bf      	bne.n	8003de2 <_puts_r+0x42>
 8003e62:	e7df      	b.n	8003e24 <_puts_r+0x84>
 8003e64:	250a      	movs	r5, #10
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	6022      	str	r2, [r4, #0]
 8003e6c:	701d      	strb	r5, [r3, #0]
 8003e6e:	e7db      	b.n	8003e28 <_puts_r+0x88>
 8003e70:	080049d4 	.word	0x080049d4
 8003e74:	080049f4 	.word	0x080049f4
 8003e78:	080049b4 	.word	0x080049b4

08003e7c <puts>:
 8003e7c:	4b02      	ldr	r3, [pc, #8]	; (8003e88 <puts+0xc>)
 8003e7e:	4601      	mov	r1, r0
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	f7ff bf8d 	b.w	8003da0 <_puts_r>
 8003e86:	bf00      	nop
 8003e88:	2000000c 	.word	0x2000000c

08003e8c <setvbuf>:
 8003e8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003e90:	461d      	mov	r5, r3
 8003e92:	4b5d      	ldr	r3, [pc, #372]	; (8004008 <setvbuf+0x17c>)
 8003e94:	4604      	mov	r4, r0
 8003e96:	681f      	ldr	r7, [r3, #0]
 8003e98:	460e      	mov	r6, r1
 8003e9a:	4690      	mov	r8, r2
 8003e9c:	b127      	cbz	r7, 8003ea8 <setvbuf+0x1c>
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	b913      	cbnz	r3, 8003ea8 <setvbuf+0x1c>
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	f000 fa92 	bl	80043cc <__sinit>
 8003ea8:	4b58      	ldr	r3, [pc, #352]	; (800400c <setvbuf+0x180>)
 8003eaa:	429c      	cmp	r4, r3
 8003eac:	d167      	bne.n	8003f7e <setvbuf+0xf2>
 8003eae:	687c      	ldr	r4, [r7, #4]
 8003eb0:	f1b8 0f02 	cmp.w	r8, #2
 8003eb4:	d006      	beq.n	8003ec4 <setvbuf+0x38>
 8003eb6:	f1b8 0f01 	cmp.w	r8, #1
 8003eba:	f200 809f 	bhi.w	8003ffc <setvbuf+0x170>
 8003ebe:	2d00      	cmp	r5, #0
 8003ec0:	f2c0 809c 	blt.w	8003ffc <setvbuf+0x170>
 8003ec4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ec6:	07db      	lsls	r3, r3, #31
 8003ec8:	d405      	bmi.n	8003ed6 <setvbuf+0x4a>
 8003eca:	89a3      	ldrh	r3, [r4, #12]
 8003ecc:	0598      	lsls	r0, r3, #22
 8003ece:	d402      	bmi.n	8003ed6 <setvbuf+0x4a>
 8003ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ed2:	f000 fb19 	bl	8004508 <__retarget_lock_acquire_recursive>
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	4638      	mov	r0, r7
 8003eda:	f000 f9e3 	bl	80042a4 <_fflush_r>
 8003ede:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ee0:	b141      	cbz	r1, 8003ef4 <setvbuf+0x68>
 8003ee2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ee6:	4299      	cmp	r1, r3
 8003ee8:	d002      	beq.n	8003ef0 <setvbuf+0x64>
 8003eea:	4638      	mov	r0, r7
 8003eec:	f000 fb7a 	bl	80045e4 <_free_r>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	6363      	str	r3, [r4, #52]	; 0x34
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61a3      	str	r3, [r4, #24]
 8003ef8:	6063      	str	r3, [r4, #4]
 8003efa:	89a3      	ldrh	r3, [r4, #12]
 8003efc:	0619      	lsls	r1, r3, #24
 8003efe:	d503      	bpl.n	8003f08 <setvbuf+0x7c>
 8003f00:	4638      	mov	r0, r7
 8003f02:	6921      	ldr	r1, [r4, #16]
 8003f04:	f000 fb6e 	bl	80045e4 <_free_r>
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	f1b8 0f02 	cmp.w	r8, #2
 8003f0e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003f12:	f023 0303 	bic.w	r3, r3, #3
 8003f16:	81a3      	strh	r3, [r4, #12]
 8003f18:	d06c      	beq.n	8003ff4 <setvbuf+0x168>
 8003f1a:	ab01      	add	r3, sp, #4
 8003f1c:	466a      	mov	r2, sp
 8003f1e:	4621      	mov	r1, r4
 8003f20:	4638      	mov	r0, r7
 8003f22:	f000 faf3 	bl	800450c <__swhatbuf_r>
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	4318      	orrs	r0, r3
 8003f2a:	81a0      	strh	r0, [r4, #12]
 8003f2c:	2d00      	cmp	r5, #0
 8003f2e:	d130      	bne.n	8003f92 <setvbuf+0x106>
 8003f30:	9d00      	ldr	r5, [sp, #0]
 8003f32:	4628      	mov	r0, r5
 8003f34:	f000 fb4e 	bl	80045d4 <malloc>
 8003f38:	4606      	mov	r6, r0
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	d155      	bne.n	8003fea <setvbuf+0x15e>
 8003f3e:	f8dd 9000 	ldr.w	r9, [sp]
 8003f42:	45a9      	cmp	r9, r5
 8003f44:	d14a      	bne.n	8003fdc <setvbuf+0x150>
 8003f46:	f04f 35ff 	mov.w	r5, #4294967295
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	60a2      	str	r2, [r4, #8]
 8003f4e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003f52:	6022      	str	r2, [r4, #0]
 8003f54:	6122      	str	r2, [r4, #16]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f5c:	6162      	str	r2, [r4, #20]
 8003f5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f60:	f043 0302 	orr.w	r3, r3, #2
 8003f64:	07d2      	lsls	r2, r2, #31
 8003f66:	81a3      	strh	r3, [r4, #12]
 8003f68:	d405      	bmi.n	8003f76 <setvbuf+0xea>
 8003f6a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003f6e:	d102      	bne.n	8003f76 <setvbuf+0xea>
 8003f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f72:	f000 faca 	bl	800450a <__retarget_lock_release_recursive>
 8003f76:	4628      	mov	r0, r5
 8003f78:	b003      	add	sp, #12
 8003f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f7e:	4b24      	ldr	r3, [pc, #144]	; (8004010 <setvbuf+0x184>)
 8003f80:	429c      	cmp	r4, r3
 8003f82:	d101      	bne.n	8003f88 <setvbuf+0xfc>
 8003f84:	68bc      	ldr	r4, [r7, #8]
 8003f86:	e793      	b.n	8003eb0 <setvbuf+0x24>
 8003f88:	4b22      	ldr	r3, [pc, #136]	; (8004014 <setvbuf+0x188>)
 8003f8a:	429c      	cmp	r4, r3
 8003f8c:	bf08      	it	eq
 8003f8e:	68fc      	ldreq	r4, [r7, #12]
 8003f90:	e78e      	b.n	8003eb0 <setvbuf+0x24>
 8003f92:	2e00      	cmp	r6, #0
 8003f94:	d0cd      	beq.n	8003f32 <setvbuf+0xa6>
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	b913      	cbnz	r3, 8003fa0 <setvbuf+0x114>
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	f000 fa16 	bl	80043cc <__sinit>
 8003fa0:	f1b8 0f01 	cmp.w	r8, #1
 8003fa4:	bf08      	it	eq
 8003fa6:	89a3      	ldrheq	r3, [r4, #12]
 8003fa8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003fac:	bf04      	itt	eq
 8003fae:	f043 0301 	orreq.w	r3, r3, #1
 8003fb2:	81a3      	strheq	r3, [r4, #12]
 8003fb4:	89a2      	ldrh	r2, [r4, #12]
 8003fb6:	6026      	str	r6, [r4, #0]
 8003fb8:	f012 0308 	ands.w	r3, r2, #8
 8003fbc:	d01c      	beq.n	8003ff8 <setvbuf+0x16c>
 8003fbe:	07d3      	lsls	r3, r2, #31
 8003fc0:	bf41      	itttt	mi
 8003fc2:	2300      	movmi	r3, #0
 8003fc4:	426d      	negmi	r5, r5
 8003fc6:	60a3      	strmi	r3, [r4, #8]
 8003fc8:	61a5      	strmi	r5, [r4, #24]
 8003fca:	bf58      	it	pl
 8003fcc:	60a5      	strpl	r5, [r4, #8]
 8003fce:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003fd0:	f015 0501 	ands.w	r5, r5, #1
 8003fd4:	d115      	bne.n	8004002 <setvbuf+0x176>
 8003fd6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003fda:	e7c8      	b.n	8003f6e <setvbuf+0xe2>
 8003fdc:	4648      	mov	r0, r9
 8003fde:	f000 faf9 	bl	80045d4 <malloc>
 8003fe2:	4606      	mov	r6, r0
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d0ae      	beq.n	8003f46 <setvbuf+0xba>
 8003fe8:	464d      	mov	r5, r9
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff0:	81a3      	strh	r3, [r4, #12]
 8003ff2:	e7d0      	b.n	8003f96 <setvbuf+0x10a>
 8003ff4:	2500      	movs	r5, #0
 8003ff6:	e7a8      	b.n	8003f4a <setvbuf+0xbe>
 8003ff8:	60a3      	str	r3, [r4, #8]
 8003ffa:	e7e8      	b.n	8003fce <setvbuf+0x142>
 8003ffc:	f04f 35ff 	mov.w	r5, #4294967295
 8004000:	e7b9      	b.n	8003f76 <setvbuf+0xea>
 8004002:	2500      	movs	r5, #0
 8004004:	e7b7      	b.n	8003f76 <setvbuf+0xea>
 8004006:	bf00      	nop
 8004008:	2000000c 	.word	0x2000000c
 800400c:	080049d4 	.word	0x080049d4
 8004010:	080049f4 	.word	0x080049f4
 8004014:	080049b4 	.word	0x080049b4

08004018 <__swbuf_r>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	460e      	mov	r6, r1
 800401c:	4614      	mov	r4, r2
 800401e:	4605      	mov	r5, r0
 8004020:	b118      	cbz	r0, 800402a <__swbuf_r+0x12>
 8004022:	6983      	ldr	r3, [r0, #24]
 8004024:	b90b      	cbnz	r3, 800402a <__swbuf_r+0x12>
 8004026:	f000 f9d1 	bl	80043cc <__sinit>
 800402a:	4b21      	ldr	r3, [pc, #132]	; (80040b0 <__swbuf_r+0x98>)
 800402c:	429c      	cmp	r4, r3
 800402e:	d12b      	bne.n	8004088 <__swbuf_r+0x70>
 8004030:	686c      	ldr	r4, [r5, #4]
 8004032:	69a3      	ldr	r3, [r4, #24]
 8004034:	60a3      	str	r3, [r4, #8]
 8004036:	89a3      	ldrh	r3, [r4, #12]
 8004038:	071a      	lsls	r2, r3, #28
 800403a:	d52f      	bpl.n	800409c <__swbuf_r+0x84>
 800403c:	6923      	ldr	r3, [r4, #16]
 800403e:	b36b      	cbz	r3, 800409c <__swbuf_r+0x84>
 8004040:	6923      	ldr	r3, [r4, #16]
 8004042:	6820      	ldr	r0, [r4, #0]
 8004044:	b2f6      	uxtb	r6, r6
 8004046:	1ac0      	subs	r0, r0, r3
 8004048:	6963      	ldr	r3, [r4, #20]
 800404a:	4637      	mov	r7, r6
 800404c:	4283      	cmp	r3, r0
 800404e:	dc04      	bgt.n	800405a <__swbuf_r+0x42>
 8004050:	4621      	mov	r1, r4
 8004052:	4628      	mov	r0, r5
 8004054:	f000 f926 	bl	80042a4 <_fflush_r>
 8004058:	bb30      	cbnz	r0, 80040a8 <__swbuf_r+0x90>
 800405a:	68a3      	ldr	r3, [r4, #8]
 800405c:	3001      	adds	r0, #1
 800405e:	3b01      	subs	r3, #1
 8004060:	60a3      	str	r3, [r4, #8]
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	6022      	str	r2, [r4, #0]
 8004068:	701e      	strb	r6, [r3, #0]
 800406a:	6963      	ldr	r3, [r4, #20]
 800406c:	4283      	cmp	r3, r0
 800406e:	d004      	beq.n	800407a <__swbuf_r+0x62>
 8004070:	89a3      	ldrh	r3, [r4, #12]
 8004072:	07db      	lsls	r3, r3, #31
 8004074:	d506      	bpl.n	8004084 <__swbuf_r+0x6c>
 8004076:	2e0a      	cmp	r6, #10
 8004078:	d104      	bne.n	8004084 <__swbuf_r+0x6c>
 800407a:	4621      	mov	r1, r4
 800407c:	4628      	mov	r0, r5
 800407e:	f000 f911 	bl	80042a4 <_fflush_r>
 8004082:	b988      	cbnz	r0, 80040a8 <__swbuf_r+0x90>
 8004084:	4638      	mov	r0, r7
 8004086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004088:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <__swbuf_r+0x9c>)
 800408a:	429c      	cmp	r4, r3
 800408c:	d101      	bne.n	8004092 <__swbuf_r+0x7a>
 800408e:	68ac      	ldr	r4, [r5, #8]
 8004090:	e7cf      	b.n	8004032 <__swbuf_r+0x1a>
 8004092:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <__swbuf_r+0xa0>)
 8004094:	429c      	cmp	r4, r3
 8004096:	bf08      	it	eq
 8004098:	68ec      	ldreq	r4, [r5, #12]
 800409a:	e7ca      	b.n	8004032 <__swbuf_r+0x1a>
 800409c:	4621      	mov	r1, r4
 800409e:	4628      	mov	r0, r5
 80040a0:	f000 f80c 	bl	80040bc <__swsetup_r>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	d0cb      	beq.n	8004040 <__swbuf_r+0x28>
 80040a8:	f04f 37ff 	mov.w	r7, #4294967295
 80040ac:	e7ea      	b.n	8004084 <__swbuf_r+0x6c>
 80040ae:	bf00      	nop
 80040b0:	080049d4 	.word	0x080049d4
 80040b4:	080049f4 	.word	0x080049f4
 80040b8:	080049b4 	.word	0x080049b4

080040bc <__swsetup_r>:
 80040bc:	4b32      	ldr	r3, [pc, #200]	; (8004188 <__swsetup_r+0xcc>)
 80040be:	b570      	push	{r4, r5, r6, lr}
 80040c0:	681d      	ldr	r5, [r3, #0]
 80040c2:	4606      	mov	r6, r0
 80040c4:	460c      	mov	r4, r1
 80040c6:	b125      	cbz	r5, 80040d2 <__swsetup_r+0x16>
 80040c8:	69ab      	ldr	r3, [r5, #24]
 80040ca:	b913      	cbnz	r3, 80040d2 <__swsetup_r+0x16>
 80040cc:	4628      	mov	r0, r5
 80040ce:	f000 f97d 	bl	80043cc <__sinit>
 80040d2:	4b2e      	ldr	r3, [pc, #184]	; (800418c <__swsetup_r+0xd0>)
 80040d4:	429c      	cmp	r4, r3
 80040d6:	d10f      	bne.n	80040f8 <__swsetup_r+0x3c>
 80040d8:	686c      	ldr	r4, [r5, #4]
 80040da:	89a3      	ldrh	r3, [r4, #12]
 80040dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040e0:	0719      	lsls	r1, r3, #28
 80040e2:	d42c      	bmi.n	800413e <__swsetup_r+0x82>
 80040e4:	06dd      	lsls	r5, r3, #27
 80040e6:	d411      	bmi.n	800410c <__swsetup_r+0x50>
 80040e8:	2309      	movs	r3, #9
 80040ea:	6033      	str	r3, [r6, #0]
 80040ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295
 80040f4:	81a3      	strh	r3, [r4, #12]
 80040f6:	e03e      	b.n	8004176 <__swsetup_r+0xba>
 80040f8:	4b25      	ldr	r3, [pc, #148]	; (8004190 <__swsetup_r+0xd4>)
 80040fa:	429c      	cmp	r4, r3
 80040fc:	d101      	bne.n	8004102 <__swsetup_r+0x46>
 80040fe:	68ac      	ldr	r4, [r5, #8]
 8004100:	e7eb      	b.n	80040da <__swsetup_r+0x1e>
 8004102:	4b24      	ldr	r3, [pc, #144]	; (8004194 <__swsetup_r+0xd8>)
 8004104:	429c      	cmp	r4, r3
 8004106:	bf08      	it	eq
 8004108:	68ec      	ldreq	r4, [r5, #12]
 800410a:	e7e6      	b.n	80040da <__swsetup_r+0x1e>
 800410c:	0758      	lsls	r0, r3, #29
 800410e:	d512      	bpl.n	8004136 <__swsetup_r+0x7a>
 8004110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004112:	b141      	cbz	r1, 8004126 <__swsetup_r+0x6a>
 8004114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004118:	4299      	cmp	r1, r3
 800411a:	d002      	beq.n	8004122 <__swsetup_r+0x66>
 800411c:	4630      	mov	r0, r6
 800411e:	f000 fa61 	bl	80045e4 <_free_r>
 8004122:	2300      	movs	r3, #0
 8004124:	6363      	str	r3, [r4, #52]	; 0x34
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800412c:	81a3      	strh	r3, [r4, #12]
 800412e:	2300      	movs	r3, #0
 8004130:	6063      	str	r3, [r4, #4]
 8004132:	6923      	ldr	r3, [r4, #16]
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	89a3      	ldrh	r3, [r4, #12]
 8004138:	f043 0308 	orr.w	r3, r3, #8
 800413c:	81a3      	strh	r3, [r4, #12]
 800413e:	6923      	ldr	r3, [r4, #16]
 8004140:	b94b      	cbnz	r3, 8004156 <__swsetup_r+0x9a>
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414c:	d003      	beq.n	8004156 <__swsetup_r+0x9a>
 800414e:	4621      	mov	r1, r4
 8004150:	4630      	mov	r0, r6
 8004152:	f000 f9ff 	bl	8004554 <__smakebuf_r>
 8004156:	89a0      	ldrh	r0, [r4, #12]
 8004158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800415c:	f010 0301 	ands.w	r3, r0, #1
 8004160:	d00a      	beq.n	8004178 <__swsetup_r+0xbc>
 8004162:	2300      	movs	r3, #0
 8004164:	60a3      	str	r3, [r4, #8]
 8004166:	6963      	ldr	r3, [r4, #20]
 8004168:	425b      	negs	r3, r3
 800416a:	61a3      	str	r3, [r4, #24]
 800416c:	6923      	ldr	r3, [r4, #16]
 800416e:	b943      	cbnz	r3, 8004182 <__swsetup_r+0xc6>
 8004170:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004174:	d1ba      	bne.n	80040ec <__swsetup_r+0x30>
 8004176:	bd70      	pop	{r4, r5, r6, pc}
 8004178:	0781      	lsls	r1, r0, #30
 800417a:	bf58      	it	pl
 800417c:	6963      	ldrpl	r3, [r4, #20]
 800417e:	60a3      	str	r3, [r4, #8]
 8004180:	e7f4      	b.n	800416c <__swsetup_r+0xb0>
 8004182:	2000      	movs	r0, #0
 8004184:	e7f7      	b.n	8004176 <__swsetup_r+0xba>
 8004186:	bf00      	nop
 8004188:	2000000c 	.word	0x2000000c
 800418c:	080049d4 	.word	0x080049d4
 8004190:	080049f4 	.word	0x080049f4
 8004194:	080049b4 	.word	0x080049b4

08004198 <__sflush_r>:
 8004198:	898a      	ldrh	r2, [r1, #12]
 800419a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800419e:	4605      	mov	r5, r0
 80041a0:	0710      	lsls	r0, r2, #28
 80041a2:	460c      	mov	r4, r1
 80041a4:	d458      	bmi.n	8004258 <__sflush_r+0xc0>
 80041a6:	684b      	ldr	r3, [r1, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	dc05      	bgt.n	80041b8 <__sflush_r+0x20>
 80041ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	dc02      	bgt.n	80041b8 <__sflush_r+0x20>
 80041b2:	2000      	movs	r0, #0
 80041b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041ba:	2e00      	cmp	r6, #0
 80041bc:	d0f9      	beq.n	80041b2 <__sflush_r+0x1a>
 80041be:	2300      	movs	r3, #0
 80041c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041c4:	682f      	ldr	r7, [r5, #0]
 80041c6:	602b      	str	r3, [r5, #0]
 80041c8:	d032      	beq.n	8004230 <__sflush_r+0x98>
 80041ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	075a      	lsls	r2, r3, #29
 80041d0:	d505      	bpl.n	80041de <__sflush_r+0x46>
 80041d2:	6863      	ldr	r3, [r4, #4]
 80041d4:	1ac0      	subs	r0, r0, r3
 80041d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041d8:	b10b      	cbz	r3, 80041de <__sflush_r+0x46>
 80041da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041dc:	1ac0      	subs	r0, r0, r3
 80041de:	2300      	movs	r3, #0
 80041e0:	4602      	mov	r2, r0
 80041e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041e4:	4628      	mov	r0, r5
 80041e6:	6a21      	ldr	r1, [r4, #32]
 80041e8:	47b0      	blx	r6
 80041ea:	1c43      	adds	r3, r0, #1
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	d106      	bne.n	80041fe <__sflush_r+0x66>
 80041f0:	6829      	ldr	r1, [r5, #0]
 80041f2:	291d      	cmp	r1, #29
 80041f4:	d82c      	bhi.n	8004250 <__sflush_r+0xb8>
 80041f6:	4a2a      	ldr	r2, [pc, #168]	; (80042a0 <__sflush_r+0x108>)
 80041f8:	40ca      	lsrs	r2, r1
 80041fa:	07d6      	lsls	r6, r2, #31
 80041fc:	d528      	bpl.n	8004250 <__sflush_r+0xb8>
 80041fe:	2200      	movs	r2, #0
 8004200:	6062      	str	r2, [r4, #4]
 8004202:	6922      	ldr	r2, [r4, #16]
 8004204:	04d9      	lsls	r1, r3, #19
 8004206:	6022      	str	r2, [r4, #0]
 8004208:	d504      	bpl.n	8004214 <__sflush_r+0x7c>
 800420a:	1c42      	adds	r2, r0, #1
 800420c:	d101      	bne.n	8004212 <__sflush_r+0x7a>
 800420e:	682b      	ldr	r3, [r5, #0]
 8004210:	b903      	cbnz	r3, 8004214 <__sflush_r+0x7c>
 8004212:	6560      	str	r0, [r4, #84]	; 0x54
 8004214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004216:	602f      	str	r7, [r5, #0]
 8004218:	2900      	cmp	r1, #0
 800421a:	d0ca      	beq.n	80041b2 <__sflush_r+0x1a>
 800421c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004220:	4299      	cmp	r1, r3
 8004222:	d002      	beq.n	800422a <__sflush_r+0x92>
 8004224:	4628      	mov	r0, r5
 8004226:	f000 f9dd 	bl	80045e4 <_free_r>
 800422a:	2000      	movs	r0, #0
 800422c:	6360      	str	r0, [r4, #52]	; 0x34
 800422e:	e7c1      	b.n	80041b4 <__sflush_r+0x1c>
 8004230:	6a21      	ldr	r1, [r4, #32]
 8004232:	2301      	movs	r3, #1
 8004234:	4628      	mov	r0, r5
 8004236:	47b0      	blx	r6
 8004238:	1c41      	adds	r1, r0, #1
 800423a:	d1c7      	bne.n	80041cc <__sflush_r+0x34>
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0c4      	beq.n	80041cc <__sflush_r+0x34>
 8004242:	2b1d      	cmp	r3, #29
 8004244:	d001      	beq.n	800424a <__sflush_r+0xb2>
 8004246:	2b16      	cmp	r3, #22
 8004248:	d101      	bne.n	800424e <__sflush_r+0xb6>
 800424a:	602f      	str	r7, [r5, #0]
 800424c:	e7b1      	b.n	80041b2 <__sflush_r+0x1a>
 800424e:	89a3      	ldrh	r3, [r4, #12]
 8004250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004254:	81a3      	strh	r3, [r4, #12]
 8004256:	e7ad      	b.n	80041b4 <__sflush_r+0x1c>
 8004258:	690f      	ldr	r7, [r1, #16]
 800425a:	2f00      	cmp	r7, #0
 800425c:	d0a9      	beq.n	80041b2 <__sflush_r+0x1a>
 800425e:	0793      	lsls	r3, r2, #30
 8004260:	bf18      	it	ne
 8004262:	2300      	movne	r3, #0
 8004264:	680e      	ldr	r6, [r1, #0]
 8004266:	bf08      	it	eq
 8004268:	694b      	ldreq	r3, [r1, #20]
 800426a:	eba6 0807 	sub.w	r8, r6, r7
 800426e:	600f      	str	r7, [r1, #0]
 8004270:	608b      	str	r3, [r1, #8]
 8004272:	f1b8 0f00 	cmp.w	r8, #0
 8004276:	dd9c      	ble.n	80041b2 <__sflush_r+0x1a>
 8004278:	4643      	mov	r3, r8
 800427a:	463a      	mov	r2, r7
 800427c:	4628      	mov	r0, r5
 800427e:	6a21      	ldr	r1, [r4, #32]
 8004280:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004282:	47b0      	blx	r6
 8004284:	2800      	cmp	r0, #0
 8004286:	dc06      	bgt.n	8004296 <__sflush_r+0xfe>
 8004288:	89a3      	ldrh	r3, [r4, #12]
 800428a:	f04f 30ff 	mov.w	r0, #4294967295
 800428e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004292:	81a3      	strh	r3, [r4, #12]
 8004294:	e78e      	b.n	80041b4 <__sflush_r+0x1c>
 8004296:	4407      	add	r7, r0
 8004298:	eba8 0800 	sub.w	r8, r8, r0
 800429c:	e7e9      	b.n	8004272 <__sflush_r+0xda>
 800429e:	bf00      	nop
 80042a0:	20400001 	.word	0x20400001

080042a4 <_fflush_r>:
 80042a4:	b538      	push	{r3, r4, r5, lr}
 80042a6:	690b      	ldr	r3, [r1, #16]
 80042a8:	4605      	mov	r5, r0
 80042aa:	460c      	mov	r4, r1
 80042ac:	b913      	cbnz	r3, 80042b4 <_fflush_r+0x10>
 80042ae:	2500      	movs	r5, #0
 80042b0:	4628      	mov	r0, r5
 80042b2:	bd38      	pop	{r3, r4, r5, pc}
 80042b4:	b118      	cbz	r0, 80042be <_fflush_r+0x1a>
 80042b6:	6983      	ldr	r3, [r0, #24]
 80042b8:	b90b      	cbnz	r3, 80042be <_fflush_r+0x1a>
 80042ba:	f000 f887 	bl	80043cc <__sinit>
 80042be:	4b14      	ldr	r3, [pc, #80]	; (8004310 <_fflush_r+0x6c>)
 80042c0:	429c      	cmp	r4, r3
 80042c2:	d11b      	bne.n	80042fc <_fflush_r+0x58>
 80042c4:	686c      	ldr	r4, [r5, #4]
 80042c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0ef      	beq.n	80042ae <_fflush_r+0xa>
 80042ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042d0:	07d0      	lsls	r0, r2, #31
 80042d2:	d404      	bmi.n	80042de <_fflush_r+0x3a>
 80042d4:	0599      	lsls	r1, r3, #22
 80042d6:	d402      	bmi.n	80042de <_fflush_r+0x3a>
 80042d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042da:	f000 f915 	bl	8004508 <__retarget_lock_acquire_recursive>
 80042de:	4628      	mov	r0, r5
 80042e0:	4621      	mov	r1, r4
 80042e2:	f7ff ff59 	bl	8004198 <__sflush_r>
 80042e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042e8:	4605      	mov	r5, r0
 80042ea:	07da      	lsls	r2, r3, #31
 80042ec:	d4e0      	bmi.n	80042b0 <_fflush_r+0xc>
 80042ee:	89a3      	ldrh	r3, [r4, #12]
 80042f0:	059b      	lsls	r3, r3, #22
 80042f2:	d4dd      	bmi.n	80042b0 <_fflush_r+0xc>
 80042f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042f6:	f000 f908 	bl	800450a <__retarget_lock_release_recursive>
 80042fa:	e7d9      	b.n	80042b0 <_fflush_r+0xc>
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <_fflush_r+0x70>)
 80042fe:	429c      	cmp	r4, r3
 8004300:	d101      	bne.n	8004306 <_fflush_r+0x62>
 8004302:	68ac      	ldr	r4, [r5, #8]
 8004304:	e7df      	b.n	80042c6 <_fflush_r+0x22>
 8004306:	4b04      	ldr	r3, [pc, #16]	; (8004318 <_fflush_r+0x74>)
 8004308:	429c      	cmp	r4, r3
 800430a:	bf08      	it	eq
 800430c:	68ec      	ldreq	r4, [r5, #12]
 800430e:	e7da      	b.n	80042c6 <_fflush_r+0x22>
 8004310:	080049d4 	.word	0x080049d4
 8004314:	080049f4 	.word	0x080049f4
 8004318:	080049b4 	.word	0x080049b4

0800431c <std>:
 800431c:	2300      	movs	r3, #0
 800431e:	b510      	push	{r4, lr}
 8004320:	4604      	mov	r4, r0
 8004322:	e9c0 3300 	strd	r3, r3, [r0]
 8004326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800432a:	6083      	str	r3, [r0, #8]
 800432c:	8181      	strh	r1, [r0, #12]
 800432e:	6643      	str	r3, [r0, #100]	; 0x64
 8004330:	81c2      	strh	r2, [r0, #14]
 8004332:	6183      	str	r3, [r0, #24]
 8004334:	4619      	mov	r1, r3
 8004336:	2208      	movs	r2, #8
 8004338:	305c      	adds	r0, #92	; 0x5c
 800433a:	f7ff fd15 	bl	8003d68 <memset>
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <std+0x38>)
 8004340:	6224      	str	r4, [r4, #32]
 8004342:	6263      	str	r3, [r4, #36]	; 0x24
 8004344:	4b04      	ldr	r3, [pc, #16]	; (8004358 <std+0x3c>)
 8004346:	62a3      	str	r3, [r4, #40]	; 0x28
 8004348:	4b04      	ldr	r3, [pc, #16]	; (800435c <std+0x40>)
 800434a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <std+0x44>)
 800434e:	6323      	str	r3, [r4, #48]	; 0x30
 8004350:	bd10      	pop	{r4, pc}
 8004352:	bf00      	nop
 8004354:	080047e1 	.word	0x080047e1
 8004358:	08004803 	.word	0x08004803
 800435c:	0800483b 	.word	0x0800483b
 8004360:	0800485f 	.word	0x0800485f

08004364 <_cleanup_r>:
 8004364:	4901      	ldr	r1, [pc, #4]	; (800436c <_cleanup_r+0x8>)
 8004366:	f000 b8af 	b.w	80044c8 <_fwalk_reent>
 800436a:	bf00      	nop
 800436c:	080042a5 	.word	0x080042a5

08004370 <__sfmoreglue>:
 8004370:	b570      	push	{r4, r5, r6, lr}
 8004372:	2568      	movs	r5, #104	; 0x68
 8004374:	1e4a      	subs	r2, r1, #1
 8004376:	4355      	muls	r5, r2
 8004378:	460e      	mov	r6, r1
 800437a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800437e:	f000 f97d 	bl	800467c <_malloc_r>
 8004382:	4604      	mov	r4, r0
 8004384:	b140      	cbz	r0, 8004398 <__sfmoreglue+0x28>
 8004386:	2100      	movs	r1, #0
 8004388:	e9c0 1600 	strd	r1, r6, [r0]
 800438c:	300c      	adds	r0, #12
 800438e:	60a0      	str	r0, [r4, #8]
 8004390:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004394:	f7ff fce8 	bl	8003d68 <memset>
 8004398:	4620      	mov	r0, r4
 800439a:	bd70      	pop	{r4, r5, r6, pc}

0800439c <__sfp_lock_acquire>:
 800439c:	4801      	ldr	r0, [pc, #4]	; (80043a4 <__sfp_lock_acquire+0x8>)
 800439e:	f000 b8b3 	b.w	8004508 <__retarget_lock_acquire_recursive>
 80043a2:	bf00      	nop
 80043a4:	200007b9 	.word	0x200007b9

080043a8 <__sfp_lock_release>:
 80043a8:	4801      	ldr	r0, [pc, #4]	; (80043b0 <__sfp_lock_release+0x8>)
 80043aa:	f000 b8ae 	b.w	800450a <__retarget_lock_release_recursive>
 80043ae:	bf00      	nop
 80043b0:	200007b9 	.word	0x200007b9

080043b4 <__sinit_lock_acquire>:
 80043b4:	4801      	ldr	r0, [pc, #4]	; (80043bc <__sinit_lock_acquire+0x8>)
 80043b6:	f000 b8a7 	b.w	8004508 <__retarget_lock_acquire_recursive>
 80043ba:	bf00      	nop
 80043bc:	200007b4 	.word	0x200007b4

080043c0 <__sinit_lock_release>:
 80043c0:	4801      	ldr	r0, [pc, #4]	; (80043c8 <__sinit_lock_release+0x8>)
 80043c2:	f000 b8a2 	b.w	800450a <__retarget_lock_release_recursive>
 80043c6:	bf00      	nop
 80043c8:	200007b4 	.word	0x200007b4

080043cc <__sinit>:
 80043cc:	b510      	push	{r4, lr}
 80043ce:	4604      	mov	r4, r0
 80043d0:	f7ff fff0 	bl	80043b4 <__sinit_lock_acquire>
 80043d4:	69a3      	ldr	r3, [r4, #24]
 80043d6:	b11b      	cbz	r3, 80043e0 <__sinit+0x14>
 80043d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043dc:	f7ff bff0 	b.w	80043c0 <__sinit_lock_release>
 80043e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80043e4:	6523      	str	r3, [r4, #80]	; 0x50
 80043e6:	4b13      	ldr	r3, [pc, #76]	; (8004434 <__sinit+0x68>)
 80043e8:	4a13      	ldr	r2, [pc, #76]	; (8004438 <__sinit+0x6c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80043ee:	42a3      	cmp	r3, r4
 80043f0:	bf08      	it	eq
 80043f2:	2301      	moveq	r3, #1
 80043f4:	4620      	mov	r0, r4
 80043f6:	bf08      	it	eq
 80043f8:	61a3      	streq	r3, [r4, #24]
 80043fa:	f000 f81f 	bl	800443c <__sfp>
 80043fe:	6060      	str	r0, [r4, #4]
 8004400:	4620      	mov	r0, r4
 8004402:	f000 f81b 	bl	800443c <__sfp>
 8004406:	60a0      	str	r0, [r4, #8]
 8004408:	4620      	mov	r0, r4
 800440a:	f000 f817 	bl	800443c <__sfp>
 800440e:	2200      	movs	r2, #0
 8004410:	2104      	movs	r1, #4
 8004412:	60e0      	str	r0, [r4, #12]
 8004414:	6860      	ldr	r0, [r4, #4]
 8004416:	f7ff ff81 	bl	800431c <std>
 800441a:	2201      	movs	r2, #1
 800441c:	2109      	movs	r1, #9
 800441e:	68a0      	ldr	r0, [r4, #8]
 8004420:	f7ff ff7c 	bl	800431c <std>
 8004424:	2202      	movs	r2, #2
 8004426:	2112      	movs	r1, #18
 8004428:	68e0      	ldr	r0, [r4, #12]
 800442a:	f7ff ff77 	bl	800431c <std>
 800442e:	2301      	movs	r3, #1
 8004430:	61a3      	str	r3, [r4, #24]
 8004432:	e7d1      	b.n	80043d8 <__sinit+0xc>
 8004434:	080049b0 	.word	0x080049b0
 8004438:	08004365 	.word	0x08004365

0800443c <__sfp>:
 800443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443e:	4607      	mov	r7, r0
 8004440:	f7ff ffac 	bl	800439c <__sfp_lock_acquire>
 8004444:	4b1e      	ldr	r3, [pc, #120]	; (80044c0 <__sfp+0x84>)
 8004446:	681e      	ldr	r6, [r3, #0]
 8004448:	69b3      	ldr	r3, [r6, #24]
 800444a:	b913      	cbnz	r3, 8004452 <__sfp+0x16>
 800444c:	4630      	mov	r0, r6
 800444e:	f7ff ffbd 	bl	80043cc <__sinit>
 8004452:	3648      	adds	r6, #72	; 0x48
 8004454:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004458:	3b01      	subs	r3, #1
 800445a:	d503      	bpl.n	8004464 <__sfp+0x28>
 800445c:	6833      	ldr	r3, [r6, #0]
 800445e:	b30b      	cbz	r3, 80044a4 <__sfp+0x68>
 8004460:	6836      	ldr	r6, [r6, #0]
 8004462:	e7f7      	b.n	8004454 <__sfp+0x18>
 8004464:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004468:	b9d5      	cbnz	r5, 80044a0 <__sfp+0x64>
 800446a:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <__sfp+0x88>)
 800446c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004470:	60e3      	str	r3, [r4, #12]
 8004472:	6665      	str	r5, [r4, #100]	; 0x64
 8004474:	f000 f847 	bl	8004506 <__retarget_lock_init_recursive>
 8004478:	f7ff ff96 	bl	80043a8 <__sfp_lock_release>
 800447c:	2208      	movs	r2, #8
 800447e:	4629      	mov	r1, r5
 8004480:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004484:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004488:	6025      	str	r5, [r4, #0]
 800448a:	61a5      	str	r5, [r4, #24]
 800448c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004490:	f7ff fc6a 	bl	8003d68 <memset>
 8004494:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004498:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800449c:	4620      	mov	r0, r4
 800449e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044a0:	3468      	adds	r4, #104	; 0x68
 80044a2:	e7d9      	b.n	8004458 <__sfp+0x1c>
 80044a4:	2104      	movs	r1, #4
 80044a6:	4638      	mov	r0, r7
 80044a8:	f7ff ff62 	bl	8004370 <__sfmoreglue>
 80044ac:	4604      	mov	r4, r0
 80044ae:	6030      	str	r0, [r6, #0]
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d1d5      	bne.n	8004460 <__sfp+0x24>
 80044b4:	f7ff ff78 	bl	80043a8 <__sfp_lock_release>
 80044b8:	230c      	movs	r3, #12
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	e7ee      	b.n	800449c <__sfp+0x60>
 80044be:	bf00      	nop
 80044c0:	080049b0 	.word	0x080049b0
 80044c4:	ffff0001 	.word	0xffff0001

080044c8 <_fwalk_reent>:
 80044c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044cc:	4606      	mov	r6, r0
 80044ce:	4688      	mov	r8, r1
 80044d0:	2700      	movs	r7, #0
 80044d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044da:	f1b9 0901 	subs.w	r9, r9, #1
 80044de:	d505      	bpl.n	80044ec <_fwalk_reent+0x24>
 80044e0:	6824      	ldr	r4, [r4, #0]
 80044e2:	2c00      	cmp	r4, #0
 80044e4:	d1f7      	bne.n	80044d6 <_fwalk_reent+0xe>
 80044e6:	4638      	mov	r0, r7
 80044e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044ec:	89ab      	ldrh	r3, [r5, #12]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d907      	bls.n	8004502 <_fwalk_reent+0x3a>
 80044f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044f6:	3301      	adds	r3, #1
 80044f8:	d003      	beq.n	8004502 <_fwalk_reent+0x3a>
 80044fa:	4629      	mov	r1, r5
 80044fc:	4630      	mov	r0, r6
 80044fe:	47c0      	blx	r8
 8004500:	4307      	orrs	r7, r0
 8004502:	3568      	adds	r5, #104	; 0x68
 8004504:	e7e9      	b.n	80044da <_fwalk_reent+0x12>

08004506 <__retarget_lock_init_recursive>:
 8004506:	4770      	bx	lr

08004508 <__retarget_lock_acquire_recursive>:
 8004508:	4770      	bx	lr

0800450a <__retarget_lock_release_recursive>:
 800450a:	4770      	bx	lr

0800450c <__swhatbuf_r>:
 800450c:	b570      	push	{r4, r5, r6, lr}
 800450e:	460e      	mov	r6, r1
 8004510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004514:	4614      	mov	r4, r2
 8004516:	2900      	cmp	r1, #0
 8004518:	461d      	mov	r5, r3
 800451a:	b096      	sub	sp, #88	; 0x58
 800451c:	da07      	bge.n	800452e <__swhatbuf_r+0x22>
 800451e:	2300      	movs	r3, #0
 8004520:	602b      	str	r3, [r5, #0]
 8004522:	89b3      	ldrh	r3, [r6, #12]
 8004524:	061a      	lsls	r2, r3, #24
 8004526:	d410      	bmi.n	800454a <__swhatbuf_r+0x3e>
 8004528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800452c:	e00e      	b.n	800454c <__swhatbuf_r+0x40>
 800452e:	466a      	mov	r2, sp
 8004530:	f000 f9bc 	bl	80048ac <_fstat_r>
 8004534:	2800      	cmp	r0, #0
 8004536:	dbf2      	blt.n	800451e <__swhatbuf_r+0x12>
 8004538:	9a01      	ldr	r2, [sp, #4]
 800453a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800453e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004542:	425a      	negs	r2, r3
 8004544:	415a      	adcs	r2, r3
 8004546:	602a      	str	r2, [r5, #0]
 8004548:	e7ee      	b.n	8004528 <__swhatbuf_r+0x1c>
 800454a:	2340      	movs	r3, #64	; 0x40
 800454c:	2000      	movs	r0, #0
 800454e:	6023      	str	r3, [r4, #0]
 8004550:	b016      	add	sp, #88	; 0x58
 8004552:	bd70      	pop	{r4, r5, r6, pc}

08004554 <__smakebuf_r>:
 8004554:	898b      	ldrh	r3, [r1, #12]
 8004556:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004558:	079d      	lsls	r5, r3, #30
 800455a:	4606      	mov	r6, r0
 800455c:	460c      	mov	r4, r1
 800455e:	d507      	bpl.n	8004570 <__smakebuf_r+0x1c>
 8004560:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	6123      	str	r3, [r4, #16]
 8004568:	2301      	movs	r3, #1
 800456a:	6163      	str	r3, [r4, #20]
 800456c:	b002      	add	sp, #8
 800456e:	bd70      	pop	{r4, r5, r6, pc}
 8004570:	466a      	mov	r2, sp
 8004572:	ab01      	add	r3, sp, #4
 8004574:	f7ff ffca 	bl	800450c <__swhatbuf_r>
 8004578:	9900      	ldr	r1, [sp, #0]
 800457a:	4605      	mov	r5, r0
 800457c:	4630      	mov	r0, r6
 800457e:	f000 f87d 	bl	800467c <_malloc_r>
 8004582:	b948      	cbnz	r0, 8004598 <__smakebuf_r+0x44>
 8004584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004588:	059a      	lsls	r2, r3, #22
 800458a:	d4ef      	bmi.n	800456c <__smakebuf_r+0x18>
 800458c:	f023 0303 	bic.w	r3, r3, #3
 8004590:	f043 0302 	orr.w	r3, r3, #2
 8004594:	81a3      	strh	r3, [r4, #12]
 8004596:	e7e3      	b.n	8004560 <__smakebuf_r+0xc>
 8004598:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <__smakebuf_r+0x7c>)
 800459a:	62b3      	str	r3, [r6, #40]	; 0x28
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	6020      	str	r0, [r4, #0]
 80045a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a4:	81a3      	strh	r3, [r4, #12]
 80045a6:	9b00      	ldr	r3, [sp, #0]
 80045a8:	6120      	str	r0, [r4, #16]
 80045aa:	6163      	str	r3, [r4, #20]
 80045ac:	9b01      	ldr	r3, [sp, #4]
 80045ae:	b15b      	cbz	r3, 80045c8 <__smakebuf_r+0x74>
 80045b0:	4630      	mov	r0, r6
 80045b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045b6:	f000 f98b 	bl	80048d0 <_isatty_r>
 80045ba:	b128      	cbz	r0, 80045c8 <__smakebuf_r+0x74>
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	81a3      	strh	r3, [r4, #12]
 80045c8:	89a0      	ldrh	r0, [r4, #12]
 80045ca:	4305      	orrs	r5, r0
 80045cc:	81a5      	strh	r5, [r4, #12]
 80045ce:	e7cd      	b.n	800456c <__smakebuf_r+0x18>
 80045d0:	08004365 	.word	0x08004365

080045d4 <malloc>:
 80045d4:	4b02      	ldr	r3, [pc, #8]	; (80045e0 <malloc+0xc>)
 80045d6:	4601      	mov	r1, r0
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	f000 b84f 	b.w	800467c <_malloc_r>
 80045de:	bf00      	nop
 80045e0:	2000000c 	.word	0x2000000c

080045e4 <_free_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4605      	mov	r5, r0
 80045e8:	2900      	cmp	r1, #0
 80045ea:	d043      	beq.n	8004674 <_free_r+0x90>
 80045ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045f0:	1f0c      	subs	r4, r1, #4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bfb8      	it	lt
 80045f6:	18e4      	addlt	r4, r4, r3
 80045f8:	f000 f98c 	bl	8004914 <__malloc_lock>
 80045fc:	4a1e      	ldr	r2, [pc, #120]	; (8004678 <_free_r+0x94>)
 80045fe:	6813      	ldr	r3, [r2, #0]
 8004600:	4610      	mov	r0, r2
 8004602:	b933      	cbnz	r3, 8004612 <_free_r+0x2e>
 8004604:	6063      	str	r3, [r4, #4]
 8004606:	6014      	str	r4, [r2, #0]
 8004608:	4628      	mov	r0, r5
 800460a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800460e:	f000 b987 	b.w	8004920 <__malloc_unlock>
 8004612:	42a3      	cmp	r3, r4
 8004614:	d90a      	bls.n	800462c <_free_r+0x48>
 8004616:	6821      	ldr	r1, [r4, #0]
 8004618:	1862      	adds	r2, r4, r1
 800461a:	4293      	cmp	r3, r2
 800461c:	bf01      	itttt	eq
 800461e:	681a      	ldreq	r2, [r3, #0]
 8004620:	685b      	ldreq	r3, [r3, #4]
 8004622:	1852      	addeq	r2, r2, r1
 8004624:	6022      	streq	r2, [r4, #0]
 8004626:	6063      	str	r3, [r4, #4]
 8004628:	6004      	str	r4, [r0, #0]
 800462a:	e7ed      	b.n	8004608 <_free_r+0x24>
 800462c:	461a      	mov	r2, r3
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	b10b      	cbz	r3, 8004636 <_free_r+0x52>
 8004632:	42a3      	cmp	r3, r4
 8004634:	d9fa      	bls.n	800462c <_free_r+0x48>
 8004636:	6811      	ldr	r1, [r2, #0]
 8004638:	1850      	adds	r0, r2, r1
 800463a:	42a0      	cmp	r0, r4
 800463c:	d10b      	bne.n	8004656 <_free_r+0x72>
 800463e:	6820      	ldr	r0, [r4, #0]
 8004640:	4401      	add	r1, r0
 8004642:	1850      	adds	r0, r2, r1
 8004644:	4283      	cmp	r3, r0
 8004646:	6011      	str	r1, [r2, #0]
 8004648:	d1de      	bne.n	8004608 <_free_r+0x24>
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4401      	add	r1, r0
 8004650:	6011      	str	r1, [r2, #0]
 8004652:	6053      	str	r3, [r2, #4]
 8004654:	e7d8      	b.n	8004608 <_free_r+0x24>
 8004656:	d902      	bls.n	800465e <_free_r+0x7a>
 8004658:	230c      	movs	r3, #12
 800465a:	602b      	str	r3, [r5, #0]
 800465c:	e7d4      	b.n	8004608 <_free_r+0x24>
 800465e:	6820      	ldr	r0, [r4, #0]
 8004660:	1821      	adds	r1, r4, r0
 8004662:	428b      	cmp	r3, r1
 8004664:	bf01      	itttt	eq
 8004666:	6819      	ldreq	r1, [r3, #0]
 8004668:	685b      	ldreq	r3, [r3, #4]
 800466a:	1809      	addeq	r1, r1, r0
 800466c:	6021      	streq	r1, [r4, #0]
 800466e:	6063      	str	r3, [r4, #4]
 8004670:	6054      	str	r4, [r2, #4]
 8004672:	e7c9      	b.n	8004608 <_free_r+0x24>
 8004674:	bd38      	pop	{r3, r4, r5, pc}
 8004676:	bf00      	nop
 8004678:	20000094 	.word	0x20000094

0800467c <_malloc_r>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	1ccd      	adds	r5, r1, #3
 8004680:	f025 0503 	bic.w	r5, r5, #3
 8004684:	3508      	adds	r5, #8
 8004686:	2d0c      	cmp	r5, #12
 8004688:	bf38      	it	cc
 800468a:	250c      	movcc	r5, #12
 800468c:	2d00      	cmp	r5, #0
 800468e:	4606      	mov	r6, r0
 8004690:	db01      	blt.n	8004696 <_malloc_r+0x1a>
 8004692:	42a9      	cmp	r1, r5
 8004694:	d903      	bls.n	800469e <_malloc_r+0x22>
 8004696:	230c      	movs	r3, #12
 8004698:	6033      	str	r3, [r6, #0]
 800469a:	2000      	movs	r0, #0
 800469c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800469e:	f000 f939 	bl	8004914 <__malloc_lock>
 80046a2:	4921      	ldr	r1, [pc, #132]	; (8004728 <_malloc_r+0xac>)
 80046a4:	680a      	ldr	r2, [r1, #0]
 80046a6:	4614      	mov	r4, r2
 80046a8:	b99c      	cbnz	r4, 80046d2 <_malloc_r+0x56>
 80046aa:	4f20      	ldr	r7, [pc, #128]	; (800472c <_malloc_r+0xb0>)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	b923      	cbnz	r3, 80046ba <_malloc_r+0x3e>
 80046b0:	4621      	mov	r1, r4
 80046b2:	4630      	mov	r0, r6
 80046b4:	f000 f884 	bl	80047c0 <_sbrk_r>
 80046b8:	6038      	str	r0, [r7, #0]
 80046ba:	4629      	mov	r1, r5
 80046bc:	4630      	mov	r0, r6
 80046be:	f000 f87f 	bl	80047c0 <_sbrk_r>
 80046c2:	1c43      	adds	r3, r0, #1
 80046c4:	d123      	bne.n	800470e <_malloc_r+0x92>
 80046c6:	230c      	movs	r3, #12
 80046c8:	4630      	mov	r0, r6
 80046ca:	6033      	str	r3, [r6, #0]
 80046cc:	f000 f928 	bl	8004920 <__malloc_unlock>
 80046d0:	e7e3      	b.n	800469a <_malloc_r+0x1e>
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	1b5b      	subs	r3, r3, r5
 80046d6:	d417      	bmi.n	8004708 <_malloc_r+0x8c>
 80046d8:	2b0b      	cmp	r3, #11
 80046da:	d903      	bls.n	80046e4 <_malloc_r+0x68>
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	441c      	add	r4, r3
 80046e0:	6025      	str	r5, [r4, #0]
 80046e2:	e004      	b.n	80046ee <_malloc_r+0x72>
 80046e4:	6863      	ldr	r3, [r4, #4]
 80046e6:	42a2      	cmp	r2, r4
 80046e8:	bf0c      	ite	eq
 80046ea:	600b      	streq	r3, [r1, #0]
 80046ec:	6053      	strne	r3, [r2, #4]
 80046ee:	4630      	mov	r0, r6
 80046f0:	f000 f916 	bl	8004920 <__malloc_unlock>
 80046f4:	f104 000b 	add.w	r0, r4, #11
 80046f8:	1d23      	adds	r3, r4, #4
 80046fa:	f020 0007 	bic.w	r0, r0, #7
 80046fe:	1ac2      	subs	r2, r0, r3
 8004700:	d0cc      	beq.n	800469c <_malloc_r+0x20>
 8004702:	1a1b      	subs	r3, r3, r0
 8004704:	50a3      	str	r3, [r4, r2]
 8004706:	e7c9      	b.n	800469c <_malloc_r+0x20>
 8004708:	4622      	mov	r2, r4
 800470a:	6864      	ldr	r4, [r4, #4]
 800470c:	e7cc      	b.n	80046a8 <_malloc_r+0x2c>
 800470e:	1cc4      	adds	r4, r0, #3
 8004710:	f024 0403 	bic.w	r4, r4, #3
 8004714:	42a0      	cmp	r0, r4
 8004716:	d0e3      	beq.n	80046e0 <_malloc_r+0x64>
 8004718:	1a21      	subs	r1, r4, r0
 800471a:	4630      	mov	r0, r6
 800471c:	f000 f850 	bl	80047c0 <_sbrk_r>
 8004720:	3001      	adds	r0, #1
 8004722:	d1dd      	bne.n	80046e0 <_malloc_r+0x64>
 8004724:	e7cf      	b.n	80046c6 <_malloc_r+0x4a>
 8004726:	bf00      	nop
 8004728:	20000094 	.word	0x20000094
 800472c:	20000098 	.word	0x20000098

08004730 <_putc_r>:
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	460d      	mov	r5, r1
 8004734:	4614      	mov	r4, r2
 8004736:	4606      	mov	r6, r0
 8004738:	b118      	cbz	r0, 8004742 <_putc_r+0x12>
 800473a:	6983      	ldr	r3, [r0, #24]
 800473c:	b90b      	cbnz	r3, 8004742 <_putc_r+0x12>
 800473e:	f7ff fe45 	bl	80043cc <__sinit>
 8004742:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <_putc_r+0x84>)
 8004744:	429c      	cmp	r4, r3
 8004746:	d124      	bne.n	8004792 <_putc_r+0x62>
 8004748:	6874      	ldr	r4, [r6, #4]
 800474a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800474c:	07d8      	lsls	r0, r3, #31
 800474e:	d405      	bmi.n	800475c <_putc_r+0x2c>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	0599      	lsls	r1, r3, #22
 8004754:	d402      	bmi.n	800475c <_putc_r+0x2c>
 8004756:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004758:	f7ff fed6 	bl	8004508 <__retarget_lock_acquire_recursive>
 800475c:	68a3      	ldr	r3, [r4, #8]
 800475e:	3b01      	subs	r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	60a3      	str	r3, [r4, #8]
 8004764:	da05      	bge.n	8004772 <_putc_r+0x42>
 8004766:	69a2      	ldr	r2, [r4, #24]
 8004768:	4293      	cmp	r3, r2
 800476a:	db1c      	blt.n	80047a6 <_putc_r+0x76>
 800476c:	b2eb      	uxtb	r3, r5
 800476e:	2b0a      	cmp	r3, #10
 8004770:	d019      	beq.n	80047a6 <_putc_r+0x76>
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	6022      	str	r2, [r4, #0]
 8004778:	701d      	strb	r5, [r3, #0]
 800477a:	b2ed      	uxtb	r5, r5
 800477c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800477e:	07da      	lsls	r2, r3, #31
 8004780:	d405      	bmi.n	800478e <_putc_r+0x5e>
 8004782:	89a3      	ldrh	r3, [r4, #12]
 8004784:	059b      	lsls	r3, r3, #22
 8004786:	d402      	bmi.n	800478e <_putc_r+0x5e>
 8004788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800478a:	f7ff febe 	bl	800450a <__retarget_lock_release_recursive>
 800478e:	4628      	mov	r0, r5
 8004790:	bd70      	pop	{r4, r5, r6, pc}
 8004792:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <_putc_r+0x88>)
 8004794:	429c      	cmp	r4, r3
 8004796:	d101      	bne.n	800479c <_putc_r+0x6c>
 8004798:	68b4      	ldr	r4, [r6, #8]
 800479a:	e7d6      	b.n	800474a <_putc_r+0x1a>
 800479c:	4b07      	ldr	r3, [pc, #28]	; (80047bc <_putc_r+0x8c>)
 800479e:	429c      	cmp	r4, r3
 80047a0:	bf08      	it	eq
 80047a2:	68f4      	ldreq	r4, [r6, #12]
 80047a4:	e7d1      	b.n	800474a <_putc_r+0x1a>
 80047a6:	4629      	mov	r1, r5
 80047a8:	4622      	mov	r2, r4
 80047aa:	4630      	mov	r0, r6
 80047ac:	f7ff fc34 	bl	8004018 <__swbuf_r>
 80047b0:	4605      	mov	r5, r0
 80047b2:	e7e3      	b.n	800477c <_putc_r+0x4c>
 80047b4:	080049d4 	.word	0x080049d4
 80047b8:	080049f4 	.word	0x080049f4
 80047bc:	080049b4 	.word	0x080049b4

080047c0 <_sbrk_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	2300      	movs	r3, #0
 80047c4:	4d05      	ldr	r5, [pc, #20]	; (80047dc <_sbrk_r+0x1c>)
 80047c6:	4604      	mov	r4, r0
 80047c8:	4608      	mov	r0, r1
 80047ca:	602b      	str	r3, [r5, #0]
 80047cc:	f7fc fb28 	bl	8000e20 <_sbrk>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d102      	bne.n	80047da <_sbrk_r+0x1a>
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	b103      	cbz	r3, 80047da <_sbrk_r+0x1a>
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	bd38      	pop	{r3, r4, r5, pc}
 80047dc:	200007bc 	.word	0x200007bc

080047e0 <__sread>:
 80047e0:	b510      	push	{r4, lr}
 80047e2:	460c      	mov	r4, r1
 80047e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e8:	f000 f8a0 	bl	800492c <_read_r>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	bfab      	itete	ge
 80047f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047f2:	89a3      	ldrhlt	r3, [r4, #12]
 80047f4:	181b      	addge	r3, r3, r0
 80047f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047fa:	bfac      	ite	ge
 80047fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80047fe:	81a3      	strhlt	r3, [r4, #12]
 8004800:	bd10      	pop	{r4, pc}

08004802 <__swrite>:
 8004802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004806:	461f      	mov	r7, r3
 8004808:	898b      	ldrh	r3, [r1, #12]
 800480a:	4605      	mov	r5, r0
 800480c:	05db      	lsls	r3, r3, #23
 800480e:	460c      	mov	r4, r1
 8004810:	4616      	mov	r6, r2
 8004812:	d505      	bpl.n	8004820 <__swrite+0x1e>
 8004814:	2302      	movs	r3, #2
 8004816:	2200      	movs	r2, #0
 8004818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800481c:	f000 f868 	bl	80048f0 <_lseek_r>
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	4632      	mov	r2, r6
 8004824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004828:	81a3      	strh	r3, [r4, #12]
 800482a:	4628      	mov	r0, r5
 800482c:	463b      	mov	r3, r7
 800482e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004836:	f000 b817 	b.w	8004868 <_write_r>

0800483a <__sseek>:
 800483a:	b510      	push	{r4, lr}
 800483c:	460c      	mov	r4, r1
 800483e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004842:	f000 f855 	bl	80048f0 <_lseek_r>
 8004846:	1c43      	adds	r3, r0, #1
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	bf15      	itete	ne
 800484c:	6560      	strne	r0, [r4, #84]	; 0x54
 800484e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004852:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004856:	81a3      	strheq	r3, [r4, #12]
 8004858:	bf18      	it	ne
 800485a:	81a3      	strhne	r3, [r4, #12]
 800485c:	bd10      	pop	{r4, pc}

0800485e <__sclose>:
 800485e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004862:	f000 b813 	b.w	800488c <_close_r>
	...

08004868 <_write_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4604      	mov	r4, r0
 800486c:	4608      	mov	r0, r1
 800486e:	4611      	mov	r1, r2
 8004870:	2200      	movs	r2, #0
 8004872:	4d05      	ldr	r5, [pc, #20]	; (8004888 <_write_r+0x20>)
 8004874:	602a      	str	r2, [r5, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	f7fb ffbe 	bl	80007f8 <_write>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d102      	bne.n	8004886 <_write_r+0x1e>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	b103      	cbz	r3, 8004886 <_write_r+0x1e>
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	200007bc 	.word	0x200007bc

0800488c <_close_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	2300      	movs	r3, #0
 8004890:	4d05      	ldr	r5, [pc, #20]	; (80048a8 <_close_r+0x1c>)
 8004892:	4604      	mov	r4, r0
 8004894:	4608      	mov	r0, r1
 8004896:	602b      	str	r3, [r5, #0]
 8004898:	f7fb ffda 	bl	8000850 <_close>
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	d102      	bne.n	80048a6 <_close_r+0x1a>
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	b103      	cbz	r3, 80048a6 <_close_r+0x1a>
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
 80048a8:	200007bc 	.word	0x200007bc

080048ac <_fstat_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	2300      	movs	r3, #0
 80048b0:	4d06      	ldr	r5, [pc, #24]	; (80048cc <_fstat_r+0x20>)
 80048b2:	4604      	mov	r4, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	602b      	str	r3, [r5, #0]
 80048ba:	f7fc f819 	bl	80008f0 <_fstat>
 80048be:	1c43      	adds	r3, r0, #1
 80048c0:	d102      	bne.n	80048c8 <_fstat_r+0x1c>
 80048c2:	682b      	ldr	r3, [r5, #0]
 80048c4:	b103      	cbz	r3, 80048c8 <_fstat_r+0x1c>
 80048c6:	6023      	str	r3, [r4, #0]
 80048c8:	bd38      	pop	{r3, r4, r5, pc}
 80048ca:	bf00      	nop
 80048cc:	200007bc 	.word	0x200007bc

080048d0 <_isatty_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	2300      	movs	r3, #0
 80048d4:	4d05      	ldr	r5, [pc, #20]	; (80048ec <_isatty_r+0x1c>)
 80048d6:	4604      	mov	r4, r0
 80048d8:	4608      	mov	r0, r1
 80048da:	602b      	str	r3, [r5, #0]
 80048dc:	f7fb ff76 	bl	80007cc <_isatty>
 80048e0:	1c43      	adds	r3, r0, #1
 80048e2:	d102      	bne.n	80048ea <_isatty_r+0x1a>
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	b103      	cbz	r3, 80048ea <_isatty_r+0x1a>
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	bd38      	pop	{r3, r4, r5, pc}
 80048ec:	200007bc 	.word	0x200007bc

080048f0 <_lseek_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4604      	mov	r4, r0
 80048f4:	4608      	mov	r0, r1
 80048f6:	4611      	mov	r1, r2
 80048f8:	2200      	movs	r2, #0
 80048fa:	4d05      	ldr	r5, [pc, #20]	; (8004910 <_lseek_r+0x20>)
 80048fc:	602a      	str	r2, [r5, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	f7fb ffbd 	bl	800087e <_lseek>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d102      	bne.n	800490e <_lseek_r+0x1e>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	b103      	cbz	r3, 800490e <_lseek_r+0x1e>
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	200007bc 	.word	0x200007bc

08004914 <__malloc_lock>:
 8004914:	4801      	ldr	r0, [pc, #4]	; (800491c <__malloc_lock+0x8>)
 8004916:	f7ff bdf7 	b.w	8004508 <__retarget_lock_acquire_recursive>
 800491a:	bf00      	nop
 800491c:	200007b5 	.word	0x200007b5

08004920 <__malloc_unlock>:
 8004920:	4801      	ldr	r0, [pc, #4]	; (8004928 <__malloc_unlock+0x8>)
 8004922:	f7ff bdf2 	b.w	800450a <__retarget_lock_release_recursive>
 8004926:	bf00      	nop
 8004928:	200007b5 	.word	0x200007b5

0800492c <_read_r>:
 800492c:	b538      	push	{r3, r4, r5, lr}
 800492e:	4604      	mov	r4, r0
 8004930:	4608      	mov	r0, r1
 8004932:	4611      	mov	r1, r2
 8004934:	2200      	movs	r2, #0
 8004936:	4d05      	ldr	r5, [pc, #20]	; (800494c <_read_r+0x20>)
 8004938:	602a      	str	r2, [r5, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	f7fb ffb0 	bl	80008a0 <_read>
 8004940:	1c43      	adds	r3, r0, #1
 8004942:	d102      	bne.n	800494a <_read_r+0x1e>
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	b103      	cbz	r3, 800494a <_read_r+0x1e>
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	bd38      	pop	{r3, r4, r5, pc}
 800494c:	200007bc 	.word	0x200007bc

08004950 <_init>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	bf00      	nop
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr

0800495c <_fini>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr
